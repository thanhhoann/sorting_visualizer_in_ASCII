"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var ink_1 = require("ink");
var has_ansi_1 = __importDefault(require("has-ansi"));
var lodash_isequal_1 = __importDefault(require("lodash.isequal"));
// @ts-ignore This module makes stdin emit keypress events,
// that's it.  Hasn't been published in six years, no types
// available.
var keypress_1 = __importDefault(require("keypress"));
var defaultValue = { label: '' }; // Used as return for empty array
// For the following four, whitespace is important
var IndicatorComponent = function (_a) {
    var isSelected = _a.isSelected;
    return react_1.default.createElement(ink_1.Color, { hex: "#00FF00" },
        isSelected ? '>' : ' ',
        " ");
};
var ItemComponent = function (_a) {
    var isSelected = _a.isSelected, children = _a.children;
    return (react_1.default.createElement(ink_1.Color, { hex: isSelected ? '#00FF00' : '' }, children));
};
var HighlightComponent = function (_a) {
    var children = _a.children;
    return (react_1.default.createElement(ink_1.Color, { bgHex: "#6C71C4" }, children));
};
var StatusComponent = function (_a) {
    var hasMatch = _a.hasMatch, children = _a.children, label = _a.label;
    return (react_1.default.createElement(ink_1.Text, null, (label || 'Query') + ": ",
        react_1.default.createElement(ink_1.Color, { hex: '#74BEFF' }, children)));
};
exports.QuickSearch = function (props) {
    var _a = Object.assign({}, defaultProps, props), items = _a.items, onSelect = _a.onSelect, focus = _a.focus, clearQueryChars = _a.clearQueryChars, limit = _a.limit, indicatorComponent = _a.indicatorComponent, itemComponent = _a.itemComponent, highlightComponent = _a.highlightComponent, statusComponent = _a.statusComponent, label = _a.label, forceMatchingQuery = _a.forceMatchingQuery;
    // Map prop components onto capitalized names, required
    // for JSX to recognize em
    var Indicator = indicatorComponent;
    var Item = itemComponent;
    var Highlight = highlightComponent;
    var Status = statusComponent;
    var _b = react_1.useState({
        selection: 0,
        start: 0
    }), windowIndices = _b[0], setWindowIndices = _b[1];
    var _c = react_1.useState(''), query = _c[0], setQuery = _c[1];
    var matchingItems = react_1.useMemo(function () {
        return getMatchingItems();
    }, [items, query]);
    var usingLimitedView = limit !== 0 && matchingItems.length > limit;
    var inkStdin = ink_1.useStdin();
    react_1.useEffect(function listenToRawKeyboard() {
        keypress_1.default(inkStdin.stdin);
        if (inkStdin.isRawModeSupported)
            inkStdin.setRawMode(true);
        inkStdin.stdin.addListener('keypress', handleKeyPress);
        return function () {
            inkStdin.stdin.removeListener('keypress', handleKeyPress);
            if (inkStdin.isRawModeSupported)
                inkStdin.setRawMode(false);
        };
    }, [inkStdin, query, items, windowIndices]);
    var itemRef = react_1.useRef(items);
    react_1.useEffect(function resetForNewItems() {
        if (!lodash_isequal_1.default(items, itemRef.current)) {
            itemRef.current = items;
            setWindowIndices({
                selection: 0, start: 0
            });
            setQuery('');
        }
    }, [items]);
    var getValue = function () {
        return matchingItems[windowIndices.selection] || defaultValue;
    };
    function getMatchIndex(label, query) {
        return props.caseSensitive ?
            label.indexOf(query) :
            label.toLowerCase().indexOf(query.toLowerCase());
    }
    function getMatchingItems(alternateQuery) {
        var matchQuery = alternateQuery || query;
        if (matchQuery === '')
            return items;
        return items.filter(function (item) { return getMatchIndex(item.label, matchQuery) >= 0; });
    }
    function removeCharFromQuery() {
        setQuery(function (query) { return query.slice(0, -1); });
    }
    function addCharToQuery(newChar) {
        setQuery(function (query) {
            var newQuery = query + newChar;
            var newMatching = getMatchingItems(newQuery);
            if (newMatching.length === 0 && forceMatchingQuery) {
                return query;
            }
            else {
                setWindowIndices({ start: 0, selection: 0 });
                return newQuery;
            }
        });
    }
    function selectUp() {
        setWindowIndices(function (windowIndices) {
            var selection = windowIndices.selection, start = windowIndices.start;
            var newSelection = selection;
            var newStart = start;
            if (selection === 0) {
                // Wrap around to the bottom
                newSelection = matchingItems.length - 1;
                if (usingLimitedView) {
                    newStart = matchingItems.length - limit;
                }
            }
            else {
                // Go up, potentially moving up window, unless
                // it is already 0.
                newSelection -= 1;
                if (usingLimitedView) {
                    if (selection - start <= 1 && start > 0) {
                        newStart -= 1;
                    }
                }
            }
            return {
                selection: newSelection,
                start: newStart
            };
        });
    }
    function selectDown() {
        setWindowIndices(function (_a) {
            var start = _a.start, selection = _a.selection;
            var newStart = start;
            var newSelection = selection;
            if (selection === matchingItems.length - 1) {
                // Wrap around to the top
                newSelection = 0;
                if (newStart !== 0)
                    newStart = 0;
            }
            else {
                // Go down, potentially moving window
                newSelection++;
                if (limit && matchingItems.length > limit && newSelection - newStart >= limit - 1) {
                    newStart += 1;
                }
            }
            return {
                start: newStart,
                selection: newSelection
            };
        });
    }
    function handleKeyPress(ch, key) {
        if (!focus)
            return;
        if (!key && parseInt(ch) !== NaN) {
            addCharToQuery(ch);
            return;
        }
        if (clearQueryChars.indexOf(ch) !== -1) {
            setQuery('');
        }
        else if (key.name === 'return') {
            onSelect(getValue());
        }
        else if (key.name === 'backspace') {
            removeCharFromQuery();
        }
        else if (key.name === 'up') {
            selectUp();
        }
        else if (key.name === 'down') {
            selectDown();
        }
        else if (key.name === 'tab') {
            if (key.shift === false) {
                selectDown();
            }
            else {
                selectUp();
            }
        }
        else if (has_ansi_1.default(key.sequence)) {
            // Ignore fancy Ansi escape codes
        }
        else {
            addCharToQuery(ch);
        }
    }
    var begin = windowIndices.start;
    var end = items.length;
    if (limit !== 0)
        end = Math.min(begin + limit, items.length);
    var visibleItems = matchingItems.slice(begin, end);
    return (react_1.default.createElement(ink_1.Box, { key: 'quicksearch-input', flexDirection: 'column' },
        react_1.default.createElement(ink_1.Box, { key: 'status-label' },
            react_1.default.createElement(Status, { label: label, hasMatch: visibleItems.length > 0 }, query)),
        visibleItems.length === 0 ?
            react_1.default.createElement(ink_1.Box, { key: 'no-items-found' }, "No matches") :
            visibleItems.map(function (item) {
                var isSelected = matchingItems.indexOf(item) === windowIndices.selection;
                var isHighlighted = undefined;
                var itemProps = { isSelected: isSelected, isHighlighted: isHighlighted, item: item };
                var label = item.label;
                var queryStart = getMatchIndex(label, query);
                var queryEnd = queryStart + query.length;
                var labelComponent;
                itemProps.isHighlighted = true;
                var preMatch = label.slice(0, queryStart);
                var match = label.slice(queryStart, queryEnd);
                var postMatch = label.slice(queryEnd);
                labelComponent = (react_1.default.createElement(ink_1.Text, null,
                    preMatch,
                    react_1.default.createElement(Highlight, null, match),
                    postMatch));
                return (react_1.default.createElement(ink_1.Box, { flexDirection: 'row', key: "item-" + item.label },
                    react_1.default.createElement(Item, __assign({}, itemProps),
                        react_1.default.createElement(Indicator, __assign({}, itemProps)),
                        labelComponent)));
            }),
        !usingLimitedView ? null : (react_1.default.createElement(ink_1.Box, { key: 'num-visible-items' },
            react_1.default.createElement(HighlightComponent, null,
                "Viewing ",
                begin,
                "-",
                end,
                " of ",
                matchingItems.length,
                " matching items (",
                items.length,
                " items overall)")))));
};
var defaultProps = {
    focus: true,
    caseSensitive: false,
    limit: 0,
    forceMatchingQuery: true,
    clearQueryChars: [
        '\u0015',
        '\u0017',
    ],
    initialSelectionIndex: 0,
    indicatorComponent: IndicatorComponent,
    itemComponent: ItemComponent,
    highlightComponent: HighlightComponent,
    statusComponent: StatusComponent
};
exports.default = exports.QuickSearch;
//# sourceMappingURL=data:application/json;base64,
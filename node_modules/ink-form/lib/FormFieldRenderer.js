"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormFieldRenderer = void 0;
var react_1 = __importStar(require("react"));
var ink_1 = require("ink");
var managers_1 = require("./managers/managers");
var DescriptionRenderer_1 = require("./DescriptionRenderer");
var FormFieldRenderer = function (props) {
    var _a, _b, _c, _d, _e;
    var manager = managers_1.getManager(props.field.type, props.customManagers);
    var _f = react_1.useState(), error = _f[0], setError = _f[1];
    var _g = react_1.useState((_a = props.value) !== null && _a !== void 0 ? _a : props.field.initialValue), currentValue = _g[0], setCurrentValue = _g[1];
    var isEditing = !!props.editingField && props.editingField === ((_b = props.field.label) !== null && _b !== void 0 ? _b : props.field.name);
    var hide = !isEditing && !!props.editingField;
    var save = function (newValue) {
        if (!error) {
            if (newValue) {
                props.onChange(newValue);
                setCurrentValue(newValue);
            }
            else {
                props.onChange(currentValue);
            }
            props.onSetEditingField(undefined);
        }
    };
    var cancel = function () {
        setCurrentValue(props.value);
        props.onSetEditingField(undefined);
        setError(undefined);
    };
    var isFocused = ink_1.useFocus({}).isFocused;
    ink_1.useInput(function (input, key) {
        var _a;
        if (!isEditing && key.return && !key.ctrl && !key.meta) {
            props.onSetEditingField((_a = props.field.label) !== null && _a !== void 0 ? _a : props.field.name);
        }
        else if (isEditing && key.escape) {
            cancel();
        }
        else if (isEditing && key.return && (!(manager === null || manager === void 0 ? void 0 : manager.needCtrlToReturnSave) || key.ctrl)) {
            save();
        }
    }, { isActive: isFocused });
    if (hide) {
        return null;
    }
    if (!isEditing) {
        var RenderValue = (_c = manager === null || manager === void 0 ? void 0 : manager.renderValue) !== null && _c !== void 0 ? _c : (function () { return react_1.default.createElement(react_1.default.Fragment, null, props.value); });
        return (react_1.default.createElement(ink_1.Box, { marginX: 2, paddingX: 1, borderStyle: "round", borderColor: isFocused ? 'blue' : undefined },
            react_1.default.createElement(ink_1.Box, { flexGrow: 1 },
                react_1.default.createElement(ink_1.Text, { underline: isFocused, color: isFocused ? 'blue' : undefined }, (_d = props.field.label) !== null && _d !== void 0 ? _d : props.field.name),
                props.field.required && react_1.default.createElement(ink_1.Text, { color: "red" }, "*"),
                react_1.default.createElement(ink_1.Text, null, ": "),
                react_1.default.createElement(ink_1.Text, { dimColor: true },
                    react_1.default.createElement(RenderValue, { value: props.value, field: props.field }))),
            isFocused && (react_1.default.createElement(ink_1.Box, null,
                react_1.default.createElement(ink_1.Text, null, "Press enter to edit")))));
    }
    else {
        var component = void 0;
        var rendererProps = __assign(__assign({}, props), { onError: setError, onClearError: function () { return setError(undefined); }, onChange: setCurrentValue, value: currentValue, onSave: save, onCancel: cancel, error: error });
        if (!manager) {
            component = react_1.default.createElement(ink_1.Text, { color: "red" },
                "No formfield manager for form field of type ",
                props.field.type,
                " available.");
        }
        else {
            var Field = manager.renderField;
            component = react_1.default.createElement(Field, __assign({}, rendererProps));
        }
        return (react_1.default.createElement(ink_1.Box, { paddingX: 3, paddingY: 1, flexDirection: "column" },
            react_1.default.createElement(ink_1.Box, null,
                react_1.default.createElement(ink_1.Text, null, (_e = props.field.label) !== null && _e !== void 0 ? _e : props.field.name),
                props.field.required && react_1.default.createElement(ink_1.Text, { color: "red" }, "*"),
                react_1.default.createElement(ink_1.Text, null, ": ")),
            react_1.default.createElement(ink_1.Box, null, component),
            props.field.description && (react_1.default.createElement(ink_1.Box, null,
                react_1.default.createElement(ink_1.Text, { dimColor: true },
                    react_1.default.createElement(DescriptionRenderer_1.DescriptionRenderer, { description: props.field.description })))),
            error && (react_1.default.createElement(ink_1.Box, null,
                react_1.default.createElement(ink_1.Text, { color: "red" },
                    "Error: ",
                    error))),
            react_1.default.createElement(ink_1.Box, { marginTop: 2 },
                react_1.default.createElement(ink_1.Text, { dimColor: true }, error ? (react_1.default.createElement(react_1.default.Fragment, null, "Press ESC to cancel.")) : (react_1.default.createElement(react_1.default.Fragment, null,
                    "Press ",
                    (manager === null || manager === void 0 ? void 0 : manager.needCtrlToReturnSave) ? 'CTRL+Enter' : 'Enter',
                    " to complete field, or ESC to cancel."))))));
    }
};
exports.FormFieldRenderer = FormFieldRenderer;

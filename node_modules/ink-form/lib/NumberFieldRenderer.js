"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberFieldRenderer = void 0;
var react_1 = __importDefault(require("react"));
var ink_1 = require("ink");
var ink_text_input_1 = __importDefault(require("ink-text-input"));
var FLOAT_REGEX = /^-?((\d+)|(\d*\.\d+))$/;
var INTEGER_REGEX = /^-?\d+$/;
var NumberFieldRenderer = function (props) {
    var _a;
    var regex = props.isFloat ? FLOAT_REGEX : INTEGER_REGEX;
    var parse = props.isFloat ? parseFloat : parseInt;
    var change = function (value) {
        if (regex.test(value)) {
            props.onClearError();
            var asNumber = Math.round(parse(value) * 100000) / 100000;
            if (props.field.min !== undefined && props.field.min > asNumber) {
                props.onError("\"" + value + "\" too small, must be above or equal to " + props.field.min + ".");
                props.onChange(value);
                return;
            }
            else if (props.field.max !== undefined && props.field.max < asNumber) {
                props.onError("\"" + value + "\" too big, must be below or equal to " + props.field.max + ".");
                props.onChange(value);
                return;
            }
            else {
                props.onChange(asNumber);
            }
        }
        else {
            props.onError("\"" + value + "\" is not an " + (props.isFloat ? 'float' : 'integer') + ".");
            props.onChange(value);
        }
    };
    ink_1.useInput(function (input, key) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (typeof props.value === 'number') {
            if (key.upArrow) {
                change('' + (((_a = props.value) !== null && _a !== void 0 ? _a : 0) + ((_b = props.field.step) !== null && _b !== void 0 ? _b : 1)));
            }
            else if (key.downArrow) {
                change('' + (((_c = props.value) !== null && _c !== void 0 ? _c : 0) - ((_d = props.field.step) !== null && _d !== void 0 ? _d : 1)));
            }
        }
        else {
            if (key.upArrow || key.downArrow) {
                change('' + (((_e = props.field.min) !== null && _e !== void 0 ? _e : 0) <= 0 && ((_f = props.field.max) !== null && _f !== void 0 ? _f : 0) >= 0 ? 0 : (_g = props.field.min) !== null && _g !== void 0 ? _g : props.field.max));
            }
        }
    });
    return (react_1.default.createElement(ink_1.Box, { borderStyle: 'round', width: "100%", flexDirection: "column" },
        react_1.default.createElement(ink_1.Box, null,
            react_1.default.createElement(ink_text_input_1.default, { value: '' + ((_a = props.value) !== null && _a !== void 0 ? _a : ''), onChange: function (value) {
                    if (regex.test(value)) {
                        props.onClearError();
                        change(value);
                    }
                    else {
                        props.onError("\"" + value + "\" is not an " + (props.isFloat ? 'float' : 'integer') + ".");
                        props.onChange(value);
                    }
                }, placeholder: props.field.placeholder, onSubmit: function () { return props.onSetEditingField(undefined); } })),
        react_1.default.createElement(ink_1.Box, null,
            react_1.default.createElement(ink_1.Text, { dimColor: true }, "Press UP/DOWN to increase or decrease the value."))));
};
exports.NumberFieldRenderer = NumberFieldRenderer;

"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSelectFormFieldManager = void 0;
var react_1 = __importDefault(require("react"));
var ink_1 = require("ink");
var ink_multi_select_1 = __importDefault(require("ink-multi-select"));
var MultiSelectFormFieldManager = /** @class */ (function () {
    function MultiSelectFormFieldManager() {
        this.type = 'multiselect';
        this.renderField = function (props) { return (react_1.default.createElement(ink_1.Box, { borderStyle: 'round', width: "100%" },
            react_1.default.createElement(ink_multi_select_1.default, { items: props.field.options.map(function (option) { var _a; return ({ value: option.value, label: (_a = option.label) !== null && _a !== void 0 ? _a : option.value }); }), onSelect: function (option) { var _a; return props.onChange(__spreadArray(__spreadArray([], ((_a = props.value) !== null && _a !== void 0 ? _a : [])), [option.value])); }, onUnselect: function (option) { var _a; return props.onChange(((_a = props.value) !== null && _a !== void 0 ? _a : []).filter(function (value) { return value !== option.value; })); }, defaultSelected: props.field.options.filter(function (option) { var _a; return (_a = props.value) === null || _a === void 0 ? void 0 : _a.includes(option.value); }) }))); };
        this.renderValue = function (props) {
            var _a, _b, _c;
            return (react_1.default.createElement(react_1.default.Fragment, null, (_c = (_b = (_a = props.field.options
                .filter(function (option) { var _a; return (_a = props.value) === null || _a === void 0 ? void 0 : _a.includes(option.value); })) === null || _a === void 0 ? void 0 : _a.map(function (option) { var _a; return (_a = option.label) !== null && _a !== void 0 ? _a : option.value; })) === null || _b === void 0 ? void 0 : _b.join(', ')) !== null && _c !== void 0 ? _c : 'No value'));
        };
    }
    return MultiSelectFormFieldManager;
}());
exports.MultiSelectFormFieldManager = MultiSelectFormFieldManager;

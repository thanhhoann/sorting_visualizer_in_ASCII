"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const BurbleSort = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  const [isRunning, setIsRunning] = useState(false);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 30; i++) {
      let block = {
        height: Math.round(Math.random() * 10),
        content: ""
      };
      let s = "";

      while (block.height--) {
        s += "*";
      }

      block.content = s;
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    setIsRunning(true);
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 100);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[j].height > blocks[i].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      if (j == i + 1) setJ(i);else setJ(i + 1);
      setI(prev => prev + 1);
    }

    if (i == blocks.length - 1) {
      setI(0);
      setJ(0);
      setIsRunning(false);
    }
  }, [j]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    height: block.height,
    width: "1",
    alignItems: "center",
    borderColor: (i == index || j == index) && isRunning == true ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, block.content)))));
};

module.exports = BurbleSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJCdXJibGVTb3J0IiwiaSIsInNldEkiLCJqIiwic2V0SiIsImV4aXQiLCJpc1J1bm5pbmciLCJzZXRJc1J1bm5pbmciLCJpbnB1dCIsImtleSIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJoZWlnaHQiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJjb250ZW50IiwicyIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwicHJldiIsImNsZWFySW50ZXJ2YWwiLCJ0ZW1wIiwibGVuZ3RoIiwibWFwIiwiaW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQnVyYmxlU29ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZShcImluay1iaWctdGV4dFwiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgQnVyYmxlU29ydCA9ICgpID0+IHtcblx0Y29uc3QgW2ksIHNldEldID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtqLCBzZXRKXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCB7IGV4aXQgfSA9IHVzZUFwcCgpO1xuXG5cdGNvbnN0IFtpc1J1bm5pbmcsIHNldElzUnVubmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRpZiAoaW5wdXQgPT09IFwicVwiKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCBnZW5lcmF0ZVJhbmRvbUJsb2NrcyA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDMwOyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGNvbnRlbnQ6IFwiXCIsXG5cdFx0XHR9O1xuXG5cdFx0XHRsZXQgcyA9IFwiXCI7XG5cdFx0XHR3aGlsZSAoYmxvY2suaGVpZ2h0LS0pIHtcblx0XHRcdFx0cyArPSBcIipcIjtcblx0XHRcdH1cblxuXHRcdFx0YmxvY2suY29udGVudCA9IHM7XG5cdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0fVxuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Z2VuZXJhdGVSYW5kb21CbG9ja3MoKTtcblx0XHRzZXRJc1J1bm5pbmcodHJ1ZSk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRKKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fSwgMTAwKTtcblxuXHRcdHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHRpbWVyKTtcblx0fSwgW10pO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0aWYgKGJsb2Nrc1tqXS5oZWlnaHQgPiBibG9ja3NbaV0uaGVpZ2h0KSB7XG5cdFx0XHRsZXQgdGVtcCA9IGJsb2Nrc1tpXTtcblx0XHRcdGJsb2Nrc1tpXSA9IGJsb2Nrc1tqXTtcblx0XHRcdGJsb2Nrc1tqXSA9IHRlbXA7XG5cdFx0fVxuXG5cdFx0aWYgKGogPT0gYmxvY2tzLmxlbmd0aCAtIDEpIHtcblx0XHRcdGlmIChqID09IGkgKyAxKSBzZXRKKGkpO1xuXHRcdFx0ZWxzZSBzZXRKKGkgKyAxKTtcblx0XHRcdHNldEkoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9XG5cblx0XHRpZiAoaSA9PSBibG9ja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0c2V0SSgwKTtcblx0XHRcdHNldEooMCk7XG5cdFx0XHRzZXRJc1J1bm5pbmcoZmFsc2UpO1xuXHRcdH1cblx0fSwgW2pdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiPlxuXHRcdFx0XHR7YmxvY2tzLm1hcCgoYmxvY2ssIGluZGV4KSA9PiAoXG5cdFx0XHRcdFx0PEJveFxuXHRcdFx0XHRcdFx0bWFyZ2luPVwiMVwiXG5cdFx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdFx0aGVpZ2h0PXtibG9jay5oZWlnaHR9XG5cdFx0XHRcdFx0XHR3aWR0aD1cIjFcIlxuXHRcdFx0XHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXG5cdFx0XHRcdFx0XHRib3JkZXJDb2xvcj17XG5cdFx0XHRcdFx0XHRcdChpID09IGluZGV4IHx8IGogPT0gaW5kZXgpICYmIGlzUnVubmluZyA9PSB0cnVlXG5cdFx0XHRcdFx0XHRcdFx0PyBcImdyZWVuXCJcblx0XHRcdFx0XHRcdFx0XHQ6IFwid2hpdGVcIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdDxUZXh0PntibG9jay5jb250ZW50fTwvVGV4dD5cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0KSl9XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnVyYmxlU29ydDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUNBLE1BQU1RLE9BQU8sR0FBR1IsT0FBTyxDQUFDLGNBQUQsQ0FBdkI7O0FBRUEsTUFBTVMsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQyxDQUFkO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBRUEsTUFBTUMsVUFBVSxHQUFHLE1BQU07RUFDeEIsTUFBTSxDQUFDQyxDQUFELEVBQUlDLElBQUosSUFBWWIsUUFBUSxDQUFDLENBQUQsQ0FBMUI7RUFDQSxNQUFNLENBQUNjLENBQUQsRUFBSUMsSUFBSixJQUFZZixRQUFRLENBQUMsQ0FBRCxDQUExQjtFQUNBLE1BQU07SUFBRWdCO0VBQUYsSUFBV2IsTUFBTSxFQUF2QjtFQUVBLE1BQU0sQ0FBQ2MsU0FBRCxFQUFZQyxZQUFaLElBQTRCbEIsUUFBUSxDQUFDLEtBQUQsQ0FBMUM7RUFFQUUsUUFBUSxDQUFDLENBQUNpQixLQUFELEVBQVFDLEdBQVIsS0FBZ0I7SUFDeEIsSUFBSUQsS0FBSyxLQUFLLEdBQWQsRUFBbUI7TUFDbEJILElBQUk7SUFDSjtFQUNELENBSk8sQ0FBUjs7RUFNQSxNQUFNSyxvQkFBb0IsR0FBRyxNQUFNO0lBQ2xDLEtBQUssSUFBSVQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtNQUM1QixJQUFJVSxLQUFLLEdBQUc7UUFDWEMsTUFBTSxFQUFFQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCLEVBQTNCLENBREc7UUFFWEMsT0FBTyxFQUFFO01BRkUsQ0FBWjtNQUtBLElBQUlDLENBQUMsR0FBRyxFQUFSOztNQUNBLE9BQU9OLEtBQUssQ0FBQ0MsTUFBTixFQUFQLEVBQXVCO1FBQ3RCSyxDQUFDLElBQUksR0FBTDtNQUNBOztNQUVETixLQUFLLENBQUNLLE9BQU4sR0FBZ0JDLENBQWhCO01BQ0FsQixNQUFNLENBQUNtQixJQUFQLENBQVlQLEtBQVo7SUFDQTtFQUNELENBZkQ7O0VBaUJBckIsU0FBUyxDQUFDLE1BQU07SUFDZm9CLG9CQUFvQjtJQUNwQkgsWUFBWSxDQUFDLElBQUQsQ0FBWjtJQUNBLE1BQU1ZLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07TUFDL0JoQixJQUFJLENBQUVpQixJQUFELElBQVVBLElBQUksR0FBRyxDQUFsQixDQUFKO0lBQ0EsQ0FGd0IsRUFFdEIsR0FGc0IsQ0FBekI7SUFJQSxPQUFPLE1BQU1DLGFBQWEsQ0FBQ0gsS0FBRCxDQUExQjtFQUNBLENBUlEsRUFRTixFQVJNLENBQVQ7RUFVQTdCLFNBQVMsQ0FBQyxNQUFNO0lBQ2YsSUFBSVMsTUFBTSxDQUFDSSxDQUFELENBQU4sQ0FBVVMsTUFBVixHQUFtQmIsTUFBTSxDQUFDRSxDQUFELENBQU4sQ0FBVVcsTUFBakMsRUFBeUM7TUFDeEMsSUFBSVcsSUFBSSxHQUFHeEIsTUFBTSxDQUFDRSxDQUFELENBQWpCO01BQ0FGLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFOLEdBQVlGLE1BQU0sQ0FBQ0ksQ0FBRCxDQUFsQjtNQUNBSixNQUFNLENBQUNJLENBQUQsQ0FBTixHQUFZb0IsSUFBWjtJQUNBOztJQUVELElBQUlwQixDQUFDLElBQUlKLE1BQU0sQ0FBQ3lCLE1BQVAsR0FBZ0IsQ0FBekIsRUFBNEI7TUFDM0IsSUFBSXJCLENBQUMsSUFBSUYsQ0FBQyxHQUFHLENBQWIsRUFBZ0JHLElBQUksQ0FBQ0gsQ0FBRCxDQUFKLENBQWhCLEtBQ0tHLElBQUksQ0FBQ0gsQ0FBQyxHQUFHLENBQUwsQ0FBSjtNQUNMQyxJQUFJLENBQUVtQixJQUFELElBQVVBLElBQUksR0FBRyxDQUFsQixDQUFKO0lBQ0E7O0lBRUQsSUFBSXBCLENBQUMsSUFBSUYsTUFBTSxDQUFDeUIsTUFBUCxHQUFnQixDQUF6QixFQUE0QjtNQUMzQnRCLElBQUksQ0FBQyxDQUFELENBQUo7TUFDQUUsSUFBSSxDQUFDLENBQUQsQ0FBSjtNQUNBRyxZQUFZLENBQUMsS0FBRCxDQUFaO0lBQ0E7RUFDRCxDQWxCUSxFQWtCTixDQUFDSixDQUFELENBbEJNLENBQVQ7RUFvQkEsb0JBQ0Msb0JBQUMsR0FBRDtJQUFLLGFBQWEsRUFBQyxRQUFuQjtJQUE0QixVQUFVLEVBQUM7RUFBdkMsZ0JBQ0Msb0JBQUMsR0FBRDtJQUFLLGFBQWEsRUFBQztFQUFuQixHQUNFSixNQUFNLENBQUMwQixHQUFQLENBQVcsQ0FBQ2QsS0FBRCxFQUFRZSxLQUFSLGtCQUNYLG9CQUFDLEdBQUQ7SUFDQyxNQUFNLEVBQUMsR0FEUjtJQUVDLEdBQUcsRUFBRUEsS0FGTjtJQUdDLE1BQU0sRUFBRWYsS0FBSyxDQUFDQyxNQUhmO0lBSUMsS0FBSyxFQUFDLEdBSlA7SUFLQyxVQUFVLEVBQUMsUUFMWjtJQU1DLFdBQVcsRUFDVixDQUFDWCxDQUFDLElBQUl5QixLQUFMLElBQWN2QixDQUFDLElBQUl1QixLQUFwQixLQUE4QnBCLFNBQVMsSUFBSSxJQUEzQyxHQUNHLE9BREgsR0FFRztFQVRMLGdCQVlDLG9CQUFDLElBQUQsUUFBT0ssS0FBSyxDQUFDSyxPQUFiLENBWkQsQ0FEQSxDQURGLENBREQsQ0FERDtBQXNCQSxDQWxGRDs7QUFvRkFXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjVCLFVBQWpCIn0=
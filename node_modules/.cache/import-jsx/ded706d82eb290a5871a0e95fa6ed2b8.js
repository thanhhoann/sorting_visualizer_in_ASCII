"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const no_blocks = 40;
const speed = 50;
const blocks = [];

const BurbleSort = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  const [isRunning, setIsRunning] = useState(false);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < no_blocks; i++) {
      let block = {
        height: Math.round(Math.random() * 10),
        content: ""
      };
      let s = "";
      let temp = block.height;

      while (temp--) {
        s += "*";
      }

      block.content = s;
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    setIsRunning(true);
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, speed);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[j].height > blocks[i].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      if (j == i + 1) setJ(i);else setJ(i + 1);
      setI(prev => prev + 1);
    }

    if (i == blocks.length - 1) {
      setI(0);
      setJ(0);
      setIsRunning(false);
    }
  }, [j]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "2",
    key: index,
    width: "1",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, {
    bold: true,
    color: (i == index || j == index) && isRunning == true ? "green" : "white"
  }, block.content)))));
};

module.exports = BurbleSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJub19ibG9ja3MiLCJzcGVlZCIsImJsb2NrcyIsIkJ1cmJsZVNvcnQiLCJpIiwic2V0SSIsImoiLCJzZXRKIiwiZXhpdCIsImlzUnVubmluZyIsInNldElzUnVubmluZyIsImlucHV0Iiwia2V5IiwiZ2VuZXJhdGVSYW5kb21CbG9ja3MiLCJibG9jayIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImNvbnRlbnQiLCJzIiwidGVtcCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwicHJldiIsImNsZWFySW50ZXJ2YWwiLCJsZW5ndGgiLCJtYXAiLCJpbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJCdXJibGVTb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IG5vX2Jsb2NrcyA9IDQwO1xuY29uc3Qgc3BlZWQgPSA1MDtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBCdXJibGVTb3J0ID0gKCkgPT4ge1xuXHRjb25zdCBbaSwgc2V0SV0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2osIHNldEpdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IHsgZXhpdCB9ID0gdXNlQXBwKCk7XG5cblx0Y29uc3QgW2lzUnVubmluZywgc2V0SXNSdW5uaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbm9fYmxvY2tzOyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGNvbnRlbnQ6IFwiXCIsXG5cdFx0XHR9O1xuXG5cdFx0XHRsZXQgcyA9IFwiXCI7XG5cdFx0XHRsZXQgdGVtcCA9IGJsb2NrLmhlaWdodDtcblx0XHRcdHdoaWxlICh0ZW1wLS0pIHtcblx0XHRcdFx0cyArPSBcIipcIjtcblx0XHRcdH1cblxuXHRcdFx0YmxvY2suY29udGVudCA9IHM7XG5cdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0fVxuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Z2VuZXJhdGVSYW5kb21CbG9ja3MoKTtcblx0XHRzZXRJc1J1bm5pbmcodHJ1ZSk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRKKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fSwgc3BlZWQpO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAoYmxvY2tzW2pdLmhlaWdodCA+IGJsb2Nrc1tpXS5oZWlnaHQpIHtcblx0XHRcdGxldCB0ZW1wID0gYmxvY2tzW2ldO1xuXHRcdFx0YmxvY2tzW2ldID0gYmxvY2tzW2pdO1xuXHRcdFx0YmxvY2tzW2pdID0gdGVtcDtcblx0XHR9XG5cblx0XHRpZiAoaiA9PSBibG9ja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0aWYgKGogPT0gaSArIDEpIHNldEooaSk7XG5cdFx0XHRlbHNlIHNldEooaSArIDEpO1xuXHRcdFx0c2V0SSgocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH1cblxuXHRcdGlmIChpID09IGJsb2Nrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRzZXRJKDApO1xuXHRcdFx0c2V0SigwKTtcblx0XHRcdHNldElzUnVubmluZyhmYWxzZSk7XG5cdFx0fVxuXHR9LCBbal0pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0XHRtYXJnaW49XCIyXCJcblx0XHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0XHR3aWR0aD1cIjFcIlxuXHRcdFx0XHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0PFRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9sZFxuXHRcdFx0XHRcdFx0XHRjb2xvcj17XG5cdFx0XHRcdFx0XHRcdFx0KGkgPT0gaW5kZXggfHwgaiA9PSBpbmRleCkgJiYgaXNSdW5uaW5nID09IHRydWVcblx0XHRcdFx0XHRcdFx0XHRcdD8gXCJncmVlblwiXG5cdFx0XHRcdFx0XHRcdFx0XHQ6IFwid2hpdGVcIlxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdHtibG9jay5jb250ZW50fVxuXHRcdFx0XHRcdFx0PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpKX1cblx0XHRcdDwvQm94PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdXJibGVTb3J0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBQ0EsTUFBTVEsT0FBTyxHQUFHUixPQUFPLENBQUMsY0FBRCxDQUF2Qjs7QUFFQSxNQUFNUyxLQUFLLEdBQUcsQ0FBQztFQUFFQyxLQUFLLEVBQUU7QUFBVCxDQUFELEVBQWlCO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpCLEVBQWlDO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpDLENBQWQ7QUFDQSxNQUFNQyxTQUFTLEdBQUcsRUFBbEI7QUFDQSxNQUFNQyxLQUFLLEdBQUcsRUFBZDtBQUNBLE1BQU1DLE1BQU0sR0FBRyxFQUFmOztBQUVBLE1BQU1DLFVBQVUsR0FBRyxNQUFNO0VBQ3hCLE1BQU0sQ0FBQ0MsQ0FBRCxFQUFJQyxJQUFKLElBQVlmLFFBQVEsQ0FBQyxDQUFELENBQTFCO0VBQ0EsTUFBTSxDQUFDZ0IsQ0FBRCxFQUFJQyxJQUFKLElBQVlqQixRQUFRLENBQUMsQ0FBRCxDQUExQjtFQUNBLE1BQU07SUFBRWtCO0VBQUYsSUFBV2YsTUFBTSxFQUF2QjtFQUVBLE1BQU0sQ0FBQ2dCLFNBQUQsRUFBWUMsWUFBWixJQUE0QnBCLFFBQVEsQ0FBQyxLQUFELENBQTFDO0VBRUFFLFFBQVEsQ0FBQyxDQUFDbUIsS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0lBQ3hCLElBQUlELEtBQUssS0FBSyxHQUFkLEVBQW1CO01BQ2xCSCxJQUFJO0lBQ0o7RUFDRCxDQUpP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
"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [i, setI] = useState(0);
  const [test, setTest] = useState(0);
  const [current, setCurrent] = useState(0);
  const [prev, setPrev] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 20; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setI(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    setCurrent(blocks[i].height);
  }, [i]);
  let text = `${current} ${current > prev ? ">" : current == prev ? "=" : "<"} ${prev}`;
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, text), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: i == index || i + 1 == index ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, block.height)))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiY29sb3IiLCJzZXRDb2xvciIsImNvdW50ZXIiLCJzZXRDb3VudGVyIiwiaSIsInNldEkiLCJ0ZXN0Iiwic2V0VGVzdCIsImN1cnJlbnQiLCJzZXRDdXJyZW50IiwicHJldiIsInNldFByZXYiLCJpbnB1dCIsImtleSIsImV4aXQiLCJnZW5lcmF0ZVJhbmRvbUJsb2NrcyIsImJsb2NrIiwiaW5kZXgiLCJoZWlnaHQiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJpc1NlbGVjdGVkIiwicHVzaCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidGV4dCIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBUZXN0ID0gKCkgPT4ge1xuXHRjb25zdCBbY29sb3IsIHNldENvbG9yXSA9IHVzZVN0YXRlKFwiXCIpO1xuXHRjb25zdCBbY291bnRlciwgc2V0Q291bnRlcl0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2ksIHNldEldID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFt0ZXN0LCBzZXRUZXN0XSA9IHVzZVN0YXRlKDApO1xuXG5cdGNvbnN0IFtjdXJyZW50LCBzZXRDdXJyZW50XSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbcHJldiwgc2V0UHJldl0gPSB1c2VTdGF0ZSgwKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMjA7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGlzU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0fTtcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0c2V0SSgocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH0sIDUwMCk7XG5cblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdHNldEN1cnJlbnQoYmxvY2tzW2ldLmhlaWdodCk7XG5cdH0sIFtpXSk7XG5cblx0bGV0IHRleHQgPSBgJHtjdXJyZW50fSAke1xuXHRcdGN1cnJlbnQgPiBwcmV2ID8gXCI+XCIgOiBjdXJyZW50ID09IHByZXYgPyBcIj1cIiA6IFwiPFwiXG5cdH0gJHtwcmV2fWA7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG5cdFx0XHQ8VGV4dD57dGV4dH08L1RleHQ+XG5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiPlxuXHRcdFx0XHR7YmxvY2tzLm1hcCgoYmxvY2ssIGluZGV4KSA9PiAoXG5cdFx0XHRcdFx0PEJveFxuXHRcdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRcdGJvcmRlclN0eWxlPVwicm91bmRcIlxuXHRcdFx0XHRcdFx0aGVpZ2h0PXtibG9jay5oZWlnaHR9XG5cdFx0XHRcdFx0XHR3aWR0aD1cIjVcIlxuXHRcdFx0XHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXG5cdFx0XHRcdFx0XHRib3JkZXJDb2xvcj17XG5cdFx0XHRcdFx0XHRcdGkgPT0gaW5kZXggfHwgaSArIDEgPT0gaW5kZXggPyBcImdyZWVuXCIgOiBcIndoaXRlXCJcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHQ8VGV4dD57YmxvY2suaGVpZ2h0fTwvVGV4dD5cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0KSl9XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUNBLE1BQU1RLE9BQU8sR0FBR1IsT0FBTyxDQUFDLGNBQUQsQ0FBdkI7O0FBRUEsTUFBTVMsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQyxDQUFkO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBRUEsTUFBTUMsSUFBSSxHQUFHLE1BQU07RUFDbEIsTUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JiLFFBQVEsQ0FBQyxFQUFELENBQWxDO0VBQ0EsTUFBTSxDQUFDYyxPQUFELEVBQVVDLFVBQVYsSUFBd0JmLFFBQVEsQ0FBQyxDQUFELENBQXRDO0VBQ0EsTUFBTSxDQUFDZ0IsQ0FBRCxFQUFJQyxJQUFKLElBQVlqQixRQUFRLENBQUMsQ0FBRCxDQUExQjtFQUNBLE1BQU0sQ0FBQ2tCLElBQUQsRUFBT0MsT0FBUCxJQUFrQm5CLFFBQVEsQ0FBQyxDQUFELENBQWhDO0VBRUEsTUFBTSxDQUFDb0IsT0FBRCxFQUFVQyxVQUFWLElBQXdCckIsUUFBUSxDQUFDLENBQUQsQ0FBdEM7RUFDQSxNQUFNLENBQUNzQixJQUFELEVBQU9DLE9BQVAsSUFBa0J2QixRQUFRLENBQUMsQ0FBRCxDQUFoQztFQUVBRSxRQUFRLENBQUMsQ0FBQ3NCLEtBQUQsRUFBUUMsR0FBUixLQUFnQjtJQUN4QixJQUFJRCxLQUFLLEtBQUssR0FBZCxFQUFtQjtNQUNsQkUsSUFBSTtJQUNKO0VBQ0QsQ0FKTyxDQUFSOztFQU1BLE1BQU1DLG9CQUFvQixHQUFHLE1BQU07SUFDbEMsS0FBSyxJQUFJWCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO01BQzVCLElBQUlZLEtBQUssR0FBRztRQUNYQyxLQUFLLEVBQUViLENBREk7UUFFWGMsTUFBTSxFQUFFQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCLEVBQTNCLENBRkc7UUFHWEMsVUFBVSxFQUFFO01BSEQsQ0FBWjtNQUtBeEIsTUFBTSxDQUFDeUIsSUFBUCxDQUFZUCxLQUFaO0lBQ0E7RUFDRCxDQVREOztFQVdBM0IsU0FBUyxDQUFDLE1BQU07SUFDZjBCLG9CQUFvQjtJQUNwQixNQUFNUyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO01BQy9CcEIsSUFBSSxDQUFFSyxJQUFELElBQVVBLElBQUksR0FBRyxDQUFsQixDQUFKO0lBQ0EsQ0FGd0IsRUFFdEIsR0FGc0IsQ0FBekI7SUFJQSxPQUFPLE1BQU1nQixhQUFhLENBQUNGLEtBQUQsQ0FBMUI7RUFDQSxDQVBRLEVBT04sRUFQTSxDQUFUO0VBU0FuQyxTQUFTLENBQUMsTUFBTTtJQUNmb0IsVUFBVSxDQUFDWCxNQUFNLENBQUNNLENBQUQsQ0FBTixDQUFVYyxNQUFYLENBQVY7RUFDQSxDQUZRLEVBRU4sQ0FBQ2QsQ0FBRCxDQUZNLENBQVQ7RUFJQSxJQUFJdUIsSUFBSSxHQUFJLEdBQUVuQixPQUFRLElBQ3JCQSxPQUFPLEdBQUdFLElBQVYsR0FBaUIsR0FBakIsR0FBdUJGLE9BQU8sSUFBSUUsSUFBWCxHQUFrQixHQUFsQixHQUF3QixHQUMvQyxJQUFHQSxJQUFLLEVBRlQ7RUFJQSxvQkFDQyxvQkFBQyxHQUFEO0lBQUssYUFBYSxFQUFDLFFBQW5CO0lBQTRCLFVBQVUsRUFBQztFQUF2QyxnQkFDQyxvQkFBQyxJQUFELFFBQU9pQixJQUFQLENBREQsZUFHQyxvQkFBQyxHQUFEO0lBQUssYUFBYSxFQUFDO0VBQW5CLEdBQ0U3QixNQUFNLENBQUM4QixHQUFQLENBQVcsQ0FBQ1osS0FBRCxFQUFRQyxLQUFSLGtCQUNYLG9CQUFDLEdBQUQ7SUFDQyxHQUFHLEVBQUVBLEtBRE47SUFFQyxXQUFXLEVBQUMsT0FGYjtJQUdDLE1BQU0sRUFBRUQsS0FBSyxDQUFDRSxNQUhmO0lBSUMsS0FBSyxFQUFDLEdBSlA7SUFLQyxVQUFVLEVBQUMsUUFMWjtJQU1DLFdBQVcsRUFDVmQsQ0FBQyxJQUFJYSxLQUFMLElBQWNiLENBQUMsR0FBRyxDQUFKLElBQVNhLEtBQXZCLEdBQStCLE9BQS9CLEdBQXlDO0VBUDNDLGdCQVVDLG9CQUFDLElBQUQsUUFBT0QsS0FBSyxDQUFDRSxNQUFiLENBVkQsQ0FEQSxDQURGLENBSEQsQ0FERDtBQXNCQSxDQWpFRDs7QUFtRUFXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQi9CLElBQWpCIn0=
"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const [test, setTest] = useState(0);
  const [current, setCurrent] = useState(0);
  const [prev, setPrev] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 10; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (j == blocks.length) {
      setI(prev => prev + 1);
      setJ(i);
    }
  }, [j]);
  let text = `${i} ${j}`;
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, text), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row",
    justifyContent: "space-between"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: i == index || j == index ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, block.height)))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiY29sb3IiLCJzZXRDb2xvciIsImNvdW50ZXIiLCJzZXRDb3VudGVyIiwiaSIsInNldEkiLCJqIiwic2V0SiIsInRlc3QiLCJzZXRUZXN0IiwiY3VycmVudCIsInNldEN1cnJlbnQiLCJwcmV2Iiwic2V0UHJldiIsImlucHV0Iiwia2V5IiwiZXhpdCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJsZW5ndGgiLCJ0ZXh0IiwibWFwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VJbnB1dCwgdXNlQXBwLCB1c2VGb2N1cywgVGV4dCwgQm94IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgQmlnVGV4dCA9IHJlcXVpcmUoXCJpbmstYmlnLXRleHRcIik7XG5cbmNvbnN0IGl0ZW1zID0gW3sgbGFiZWw6IFwiYVwiIH0sIHsgbGFiZWw6IFwiYlwiIH0sIHsgbGFiZWw6IFwiY1wiIH1dO1xuY29uc3QgYmxvY2tzID0gW107XG5cbmNvbnN0IFRlc3QgPSAoKSA9PiB7XG5cdGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtjb3VudGVyLCBzZXRDb3VudGVyXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbaSwgc2V0SV0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2osIHNldEpdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFt0ZXN0LCBzZXRUZXN0XSA9IHVzZVN0YXRlKDApO1xuXG5cdGNvbnN0IFtjdXJyZW50LCBzZXRDdXJyZW50XSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbcHJldiwgc2V0UHJldl0gPSB1c2VTdGF0ZSgwKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGlzU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0fTtcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0c2V0SigocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH0sIDUwMCk7XG5cblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmIChqID09IGJsb2Nrcy5sZW5ndGgpIHtcblx0XHRcdHNldEkoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHRcdHNldEooaSk7XG5cdFx0fVxuXHR9LCBbal0pO1xuXG5cdGxldCB0ZXh0ID0gYCR7aX0gJHtqfWA7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG5cdFx0XHQ8VGV4dD57dGV4dH08L1RleHQ+XG5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiPlxuXHRcdFx0XHR7YmxvY2tzLm1hcCgoYmxvY2ssIGluZGV4KSA9PiAoXG5cdFx0XHRcdFx0PEJveFxuXHRcdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRcdGJvcmRlclN0eWxlPVwicm91bmRcIlxuXHRcdFx0XHRcdFx0aGVpZ2h0PXtibG9jay5oZWlnaHR9XG5cdFx0XHRcdFx0XHR3aWR0aD1cIjVcIlxuXHRcdFx0XHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXG5cdFx0XHRcdFx0XHRib3JkZXJDb2xvcj17aSA9PSBpbmRleCB8fCBqID09IGluZGV4ID8gXCJncmVlblwiIDogXCJ3aGl0ZVwifVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdDxUZXh0PntibG9jay5oZWlnaHR9PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpKX1cblx0XHRcdDwvQm94PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBQ0EsTUFBTVEsT0FBTyxHQUFHUixPQUFPLENBQUMsY0FBRCxDQUF2Qjs7QUFFQSxNQUFNUyxLQUFLLEdBQUcsQ0FB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
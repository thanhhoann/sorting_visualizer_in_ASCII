"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const BurbleSort = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  const [isRunning, setIsRunning] = useState(false);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 30; i++) {
      let block = {
        height: Math.round(Math.random() * 10),
        content: ""
      };
      let s = "";
      let temp = block.height;

      while (temp--) {
        s += "*";
      }

      block.content = s;
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    setIsRunning(true);
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 50);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[j].height > blocks[i].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      if (j == i + 1) setJ(i);else setJ(i + 1);
      setI(prev => prev + 1);
    }

    if (i == blocks.length - 1) {
      setI(0);
      setJ(0);
      setIsRunning(false);
    }
  }, [j]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    height: block.height,
    width: "1",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, block.content)))));
};

module.exports = BurbleSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJCdXJibGVTb3J0IiwiaSIsInNldEkiLCJqIiwic2V0SiIsImV4aXQiLCJpc1J1bm5pbmciLCJzZXRJc1J1bm5pbmciLCJpbnB1dCIsImtleSIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJoZWlnaHQiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJjb250ZW50IiwicyIsInRlbXAiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwibGVuZ3RoIiwibWFwIiwiaW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQnVyYmxlU29ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZShcImluay1iaWctdGV4dFwiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgQnVyYmxlU29ydCA9ICgpID0+IHtcblx0Y29uc3QgW2ksIHNldEldID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtqLCBzZXRKXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCB7IGV4aXQgfSA9IHVzZUFwcCgpO1xuXG5cdGNvbnN0IFtpc1J1bm5pbmcsIHNldElzUnVubmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRpZiAoaW5wdXQgPT09IFwicVwiKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCBnZW5lcmF0ZVJhbmRvbUJsb2NrcyA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDMwOyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGNvbnRlbnQ6IFwiXCIsXG5cdFx0XHR9O1xuXG5cdFx0XHRsZXQgcyA9IFwiXCI7XG5cdFx0XHRsZXQgdGVtcCA9IGJsb2NrLmhlaWdodDtcblx0XHRcdHdoaWxlICh0ZW1wLS0pIHtcblx0XHRcdFx0cyArPSBcIipcIjtcblx0XHRcdH1cblxuXHRcdFx0YmxvY2suY29udGVudCA9IHM7XG5cdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0fVxuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Z2VuZXJhdGVSYW5kb21CbG9ja3MoKTtcblx0XHRzZXRJc1J1bm5pbmcodHJ1ZSk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRKKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fSwgNTApO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAoYmxvY2tzW2pdLmhlaWdodCA+IGJsb2Nrc1tpXS5oZWlnaHQpIHtcblx0XHRcdGxldCB0ZW1wID0gYmxvY2tzW2ldO1xuXHRcdFx0YmxvY2tzW2ldID0gYmxvY2tzW2pdO1xuXHRcdFx0YmxvY2tzW2pdID0gdGVtcDtcblx0XHR9XG5cblx0XHRpZiAoaiA9PSBibG9ja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0aWYgKGogPT0gaSArIDEpIHNldEooaSk7XG5cdFx0XHRlbHNlIHNldEooaSArIDEpO1xuXHRcdFx0c2V0SSgocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH1cblxuXHRcdGlmIChpID09IGJsb2Nrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRzZXRJKDApO1xuXHRcdFx0c2V0SigwKTtcblx0XHRcdHNldElzUnVubmluZyhmYWxzZSk7XG5cdFx0fVxuXHR9LCBbal0pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0XHRtYXJnaW49XCIxXCJcblx0XHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHRcdHdpZHRoPVwiMVwiXG5cdFx0XHRcdFx0XHRhbGlnbkl0ZW1zPVwiY2VudGVyXCJcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHQ8VGV4dD57YmxvY2suY29udGVudH08L1RleHQ+XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdCkpfVxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1cmJsZVNvcnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFFQyxRQUFGO0VBQVlDO0FBQVosSUFBMEJGLE9BQU8sQ0FBQyxPQUFELENBQXZDOztBQUNBLE1BQU07RUFBRUcsUUFBRjtFQUFZQyxNQUFaO0VBQW9CQyxRQUFwQjtFQUE4QkMsSUFBOUI7RUFBb0NDO0FBQXBDLElBQTRDUCxPQUFPLENBQUMs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
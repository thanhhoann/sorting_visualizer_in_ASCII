"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);

  const generateRandomBlocks = () => {
    for (let i = 1; i < 20; i++) {
      let block = {
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
      blocks[blockIndex].isSelected = true;
    }, 1000);
    return () => clearInterval(timer);
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    borderColor: block.isSelected ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, Math.round(block.height)))), /*#__PURE__*/React.createElement(Text, null, blockIndex));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiaSIsImJsb2NrIiwiaGVpZ2h0IiwiTWF0aCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwibWFwIiwiaW5kZXgiLCJyb3VuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtibG9ja0luZGV4LCBzZXRCbG9ja0luZGV4XSA9IHVzZVN0YXRlKDApO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgMjA7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRoZWlnaHQ6IE1hdGgucmFuZG9tKCkgKiAxMCxcblx0XHRcdFx0aXNTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHR9O1xuXHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdH1cblx0fTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGdlbmVyYXRlUmFuZG9tQmxvY2tzKCk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRCbG9ja0luZGV4KChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0XHRibG9ja3NbYmxvY2tJbmRleF0uaXNTZWxlY3RlZCA9IHRydWU7XG5cdFx0fSwgMTAwMCk7XG5cblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiPlxuXHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHR3aWR0aD1cIjVcIlxuXHRcdFx0XHRcdGJvcmRlckNvbG9yPXtibG9jay5pc1NlbGVjdGVkID8gXCJncmVlblwiIDogXCJ3aGl0ZVwifVxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0PFRleHQ+e01hdGgucm91bmQoYmxvY2suaGVpZ2h0KX08L1RleHQ+XG5cdFx0XHRcdDwvQm94PlxuXHRcdFx0KSl9XG5cdFx0XHQ8VGV4dD57YmxvY2tJbmRleH08L1RleHQ+XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3Q7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFFQyxRQUFGO0VBQVlDO0FBQVosSUFBMEJGLE9BQU8sQ0FBQyxPQUFELENBQXZDOztBQUNBLE1BQU07RUFBRUcsUUFBRjtFQUFZQyxNQUFaO0VBQW9CQyxRQUFwQjtFQUE4QkMsSUFBOUI7RUFBb0NDO0FBQXBDLElBQTRDUCxPQUFPLENBQUMsS0FBRCxDQUF6RDs7QUFFQSxNQUFNUSxLQUFLLEdBQUcsQ0FBQztFQUFFQyxLQUFLLEVBQUU7QUFBVCxDQUFELEVBQWlCO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpCLEVBQWlDO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpDLENBQWQ7QUFDQSxNQUFNQyxNQUFNLEdBQUcsRUFBZjs7QUFFQSxNQUFNQyxJQUFJLEdBQUcsTUFBTTtFQUNsQixNQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlosUUFBUSxDQUFDLEVBQUQsQ0FBbEM7RUFDQSxNQUFNLENBQUNhLE9BQUQsRUFBVUMsVUFBVixJQUF3QmQsUUFBUSxDQUFDLENBQUQsQ0FBdEM7RUFDQSxNQUFNLENBQUNlLFVBQUQsRUFBYUMsYUFBYixJQUE4QmhCLFFBQVEsQ0FBQyxDQUFELENBQTVDOztFQUVBLE1BQU1pQixvQkFBb0IsR0FBRyxNQUFNO0lBQ2xDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtNQUM1QixJQUFJQyxLQUFLLEdBQUc7UUFDWEMsTUFBTSxFQUFFQyxJQUFJLENBQUNDLE1BQUwsS0FBZ0IsRUFEYjtRQUVYQyxVQUFVLEVBQUU7TUFGRCxDQUFaO01BSUFkLE1BQU0sQ0FBQ2UsSUFBUCxDQUFZTCxLQUFaO0lBQ0E7RUFDRCxDQVJEOztFQVVBbEIsU0FBUyxDQUFDLE1BQU07SUFDZmdCLG9CQUFvQjtJQUNwQixNQUFNUSxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO01BQy9CVixhQUFhLENBQUVXLElBQUQsSUFBVUEsSUFBSSxHQUFHLENBQWxCLENBQWI7TUFDQWxCLE1BQU0sQ0FBQ00sVUFBRCxDQUFOLENBQW1CUSxVQUFuQixHQUFnQyxJQUFoQztJQUNBLENBSHdCLEVBR3RCLElBSHNCLENBQXpCO0lBS0EsT0FBTyxNQUFNSyxhQUFhLENBQUNILEtBQUQsQ0FBMUI7RUFDQSxDQVJRLEVBUU4sRUFSTSxDQUFUO0VBVUEsb0JBQ0Msb0JBQUMsR0FBRDtJQUFLLGFBQWEsRUFBQztFQUFuQixHQUNFaEIsTUFBTSxDQUFDb0IsR0FBUCxDQUFXLENBQUNWLEtBQUQsRUFBUVcsS0FBUixrQkFDWCxvQkFBQyxHQUFEO0lBQ0MsR0FBRyxFQUFFQSxLQUROO0lBRUMsV0FBVyxFQUFDLE9BRmI7SUFHQyxNQUFNLEVBQUVYLEtBQUssQ0FBQ0MsTUFIZjtJQUlDLEtBQUssRUFBQyxHQUpQO0lBS0MsV0FBVyxFQUFFRCxLQUFLLENBQUNJLFVBQU4sR0FBbUIsT0FBbkIsR0FBNkI7RUFMM0MsZ0JBT0Msb0JBQUMsSUFBRCxRQUFPRixJQUFJLENBQUNVLEtBQUwsQ0FBV1osS0FBSyxDQUFDQyxNQUFqQixDQUFQLENBUEQsQ0FEQSxDQURGLGVBWUMsb0JBQUMsSUFBRCxRQUFPTCxVQUFQLENBWkQsQ0FERDtBQWdCQSxDQXpDRDs7QUEyQ0FpQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ2QixJQUFqQiJ9
"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);
  const [test, setTest] = useState(0);
  const [current, setCurrent] = useState(0);
  const [prev, setPrev] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 20; i++) {
      let block = {
        index: i,
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    setCurrent(blocks[blockIndex].height);
    setPrev(blocks[blockIndex].height);
  }, [blockIndex]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React.createElement(Text, null, blockIndex), /*#__PURE__*/React.createElement(Text, null, current, " ", prev), blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: blockIndex == index || blockIndex - 1 == index ? "green" : "white"
  })));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsInRlc3QiLCJzZXRUZXN0IiwiY3VycmVudCIsInNldEN1cnJlbnQiLCJwcmV2Iiwic2V0UHJldiIsImlucHV0Iiwia2V5IiwiZXhpdCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiaSIsImJsb2NrIiwiaW5kZXgiLCJoZWlnaHQiLCJNYXRoIiwicmFuZG9tIiwiaXNTZWxlY3RlZCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtibG9ja0luZGV4LCBzZXRCbG9ja0luZGV4XSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbdGVzdCwgc2V0VGVzdF0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2N1cnJlbnQsIHNldEN1cnJlbnRdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtwcmV2LCBzZXRQcmV2XSA9IHVzZVN0YXRlKDApO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0aWYgKGlucHV0ID09PSBcInFcIikge1xuXHRcdFx0ZXhpdCgpO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgZ2VuZXJhdGVSYW5kb21CbG9ja3MgPSAoKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XG5cdFx0XHRsZXQgYmxvY2sgPSB7XG5cdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRoZWlnaHQ6IE1hdGgucmFuZG9tKCkgKiAxMCxcblx0XHRcdFx0aXNTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHR9O1xuXHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdH1cblx0fTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGdlbmVyYXRlUmFuZG9tQmxvY2tzKCk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRCbG9ja0luZGV4KChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fSwgNTAwKTtcblxuXHRcdHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHRpbWVyKTtcblx0fSwgW10pO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0c2V0Q3VycmVudChibG9ja3NbYmxvY2tJbmRleF0uaGVpZ2h0KTtcblx0XHRzZXRQcmV2KGJsb2Nrc1tibG9ja0luZGV4XS5oZWlnaHQpO1xuXHR9LCBbYmxvY2tJbmRleF0pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHQ8VGV4dD57YmxvY2tJbmRleH08L1RleHQ+XG5cdFx0XHQ8VGV4dD5cblx0XHRcdFx0e2N1cnJlbnR9IHtwcmV2fVxuXHRcdFx0PC9UZXh0PlxuXHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHR3aWR0aD1cIjVcIlxuXHRcdFx0XHRcdGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuXHRcdFx0XHRcdGJvcmRlckNvbG9yPXtcblx0XHRcdFx0XHRcdGJsb2NrSW5kZXggPT0gaW5kZXggfHwgYmxvY2tJbmRleCAtIDEgPT0gaW5kZXggPyBcImdyZWVuXCIgOiBcIndoaXRlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdD48L0JveD5cblx0XHRcdCkpfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBRUEsTUFBTVEsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQyxDQUFkO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBRUEsTUFBTUMsSUFBSSxHQUFHLE1BQU07RUFDbEIsTUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JaLFFBQVEsQ0FBQyxFQUFELENBQWxDO0VBQ0EsTUFBTSxDQUFD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
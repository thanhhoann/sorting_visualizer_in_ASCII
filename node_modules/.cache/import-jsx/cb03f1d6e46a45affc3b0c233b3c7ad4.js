"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);
  const [test, setTest] = useState("");
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 20; i++) {
      let block = {
        index: i,
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setTest(blocks[blockIndex]);
      setBlockIndex(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  let current = blocks[blockIndex];
  let prev = blocks[blockIndex - 1];
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React.createElement(Text, null, blockIndex), /*#__PURE__*/React.createElement(Text, null, test), blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: blockIndex == index || blockIndex - 1 == index ? "green" : "white"
  })));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsInRlc3QiLCJzZXRUZXN0IiwiaW5wdXQiLCJrZXkiLCJleGl0IiwiZ2VuZXJhdGVSYW5kb21CbG9ja3MiLCJpIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyYW5kb20iLCJpc1NlbGVjdGVkIiwicHVzaCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJwcmV2IiwiY2xlYXJJbnRlcnZhbCIsImN1cnJlbnQiLCJtYXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5cbmNvbnN0IGl0ZW1zID0gW3sgbGFiZWw6IFwiYVwiIH0sIHsgbGFiZWw6IFwiYlwiIH0sIHsgbGFiZWw6IFwiY1wiIH1dO1xuY29uc3QgYmxvY2tzID0gW107XG5cbmNvbnN0IFRlc3QgPSAoKSA9PiB7XG5cdGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtjb3VudGVyLCBzZXRDb3VudGVyXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbYmxvY2tJbmRleCwgc2V0QmxvY2tJbmRleF0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW3Rlc3QsIHNldFRlc3RdID0gdXNlU3RhdGUoXCJcIik7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRpZiAoaW5wdXQgPT09IFwicVwiKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCBnZW5lcmF0ZVJhbmRvbUJsb2NrcyA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDIwOyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdGhlaWdodDogTWF0aC5yYW5kb20oKSAqIDEwLFxuXHRcdFx0XHRpc1NlbGVjdGVkOiBmYWxzZSxcblx0XHRcdH07XG5cdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0fVxuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Z2VuZXJhdGVSYW5kb21CbG9ja3MoKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldFRlc3QoYmxvY2tzW2Jsb2NrSW5kZXhdKTtcblx0XHRcdHNldEJsb2NrSW5kZXgoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCA1MDApO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0bGV0IGN1cnJlbnQgPSBibG9ja3NbYmxvY2tJbmRleF07XG5cdGxldCBwcmV2ID0gYmxvY2tzW2Jsb2NrSW5kZXggLSAxXTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiPlxuXHRcdFx0PFRleHQ+e2Jsb2NrSW5kZXh9PC9UZXh0PlxuXHRcdFx0PFRleHQ+e3Rlc3R9PC9UZXh0PlxuXHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHR3aWR0aD1cIjVcIlxuXHRcdFx0XHRcdGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuXHRcdFx0XHRcdGJvcmRlckNvbG9yPXtcblx0XHRcdFx0XHRcdGJsb2NrSW5kZXggPT0gaW5kZXggfHwgYmxvY2tJbmRleCAtIDEgPT0gaW5kZXggPyBcImdyZWVuXCIgOiBcIndoaXRlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdD48L0JveD5cblx0XHRcdCkpfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBRUEsTUFBTVEsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQyxDQUFkO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBRUEsTUFBTUMsSUFBSSxHQUFHLE1BQU07RUFDbEIsTUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JaLFFBQVEsQ0FBQyxFQUFELENBQWxDO0VBQ0EsTUFBTSxDQUFDYSxPQUFELEVBQVVDLFVBQVYsSUFBd0JkLFFBQVEsQ0FBQyxDQUFELENBQXRDO0VBQ0EsTUFBTSxDQUFDZSxVQUFELEVBQWFDLGFBQWIsSUFBOEJoQixRQUFRLENBQUMsQ0FBRCxDQUE1QztFQUNBLE1BQU0sQ0FBQ2lCLElBQUQsRUFBT0MsT0FBUCxJQUFrQmxCLFFBQVEsQ0FBQyxFQUFELENBQWhDO0VBRUFFLFFBQVEsQ0FBQyxDQUFDaUIsS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0lBQ3hCLElBQUlELEtBQUssS0FBSyxHQUFkLEVBQW1CO01BQ2xCRSxJQUFJO0lBQ0o7RUFDRCxDQUpPLENBQVI7O0VBTUEsTUFBTUMsb0JBQW9CLEdBQUcsTUFBTTtJQUNsQyxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7TUFDNUIsSUFBSUMsS0FBSyxHQUFHO1FBQ1hDLEtBQUssRUFBRUYsQ0FESTtRQUVYRyxNQUFNLEVBQUVDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixFQUZiO1FBR1hDLFVBQVUsRUFBRTtNQUhELENBQVo7TUFLQXBCLE1BQU0sQ0FBQ3FCLElBQVAsQ0FBWU4sS0FBWjtJQUNBO0VBQ0QsQ0FURDs7RUFXQXZCLFNBQVMsQ0FBQyxNQUFNO0lBQ2ZxQixvQkFBb0I7SUFDcEIsTUFBTVMsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtNQUMvQmQsT0FBTyxDQUFDVCxNQUFNLENBQUNNLFVBQUQsQ0FBUCxDQUFQO01BQ0FDLGFBQWEsQ0FBRWlCLElBQUQsSUFBVUEsSUFBSSxHQUFHLENBQWxCLENBQWI7SUFDQSxDQUh3QixFQUd0QixHQUhzQixDQUF6QjtJQUtBLE9BQU8sTUFBTUMsYUFBYSxDQUFDSCxLQUFELENBQTFCO0VBQ0EsQ0FSUSxFQVFOLEVBUk0sQ0FBVDtFQVVBLElBQUlJLE9BQU8sR0FBRzFCLE1BQU0sQ0FBQ00sVUFBRCxDQUFwQjtFQUNBLElBQUlrQixJQUFJLEdBQUd4QixNQUFNLENBQUNNLFVBQVUsR0FBRyxDQUFkLENBQWpCO0VBRUEsb0JBQ0Msb0JBQUMsR0FBRDtJQUFLLGFBQWEsRUFBQztFQUFuQixnQkFDQyxvQkFBQyxJQUFELFFBQU9BLFVBQVAsQ0FERCxlQUVDLG9CQUFDLElBQUQsUUFBT0UsSUFBUCxDQUZELEVBR0VSLE1BQU0sQ0FBQzJCLEdBQVAsQ0FBVyxDQUFDWixLQUFELEVBQVFDLEtBQVIsa0JBQ1gsb0JBQUMsR0FBRDtJQUNDLEdBQUcsRUFBRUEsS0FETjtJQUVDLFdBQVcsRUFBQyxPQUZiO0lBR0MsTUFBTSxFQUFFRCxLQUFLLENBQUNFLE1BSGY7SUFJQyxLQUFLLEVBQUMsR0FKUDtJQUtDLFVBQVUsRUFBQyxRQUxaO0lBTUMsV0FBVyxFQUNWWCxVQUFVLElBQUlVLEtBQWQsSUFBdUJWLFVBQVUsR0FBRyxDQUFiLElBQWtCVSxLQUF6QyxHQUFpRCxPQUFqRCxHQUEyRDtFQVA3RCxFQURBLENBSEYsQ0FERDtBQWtCQSxDQXRERDs7QUF3REFZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjVCLElBQWpCIn0=
"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);
  const [test, setTest] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 20; i++) {
      let block = {
        index: i,
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
      setTest(blocks[blockIndex]);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  let current = blocks[blockIndex];
  let prev = blocks[blockIndex - 1];
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React.createElement(Text, null, blockIndex), /*#__PURE__*/React.createElement(Text, null, test), blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: blockIndex == index || blockIndex - 1 == index ? "green" : "white"
  })));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsInRlc3QiLCJzZXRUZXN0IiwiaW5wdXQiLCJrZXkiLCJleGl0IiwiZ2VuZXJhdGVSYW5kb21CbG9ja3MiLCJpIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyYW5kb20iLCJpc1NlbGVjdGVkIiwicHVzaCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJwcmV2IiwiY2xlYXJJbnRlcnZhbCIsImN1cnJlbnQiLCJtYXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5cbmNvbnN0IGl0ZW1zID0gW3sgbGFiZWw6IFwiYVwiIH0sIHsgbGFiZWw6IFwiYlwiIH0sIHsgbGFiZWw6IFwiY1wiIH1dO1xuY29uc3QgYmxvY2tzID0gW107XG5cbmNvbnN0IFRlc3QgPSAoKSA9PiB7XG5cdGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtjb3VudGVyLCBzZXRDb3VudGVyXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbYmxvY2tJbmRleCwgc2V0QmxvY2tJbmRleF0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW3Rlc3QsIHNldFRlc3RdID0gdXNlU3RhdGUoMClcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMjA7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJhbmRvbSgpICogMTAsXG5cdFx0XHRcdGlzU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0fTtcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0c2V0QmxvY2tJbmRleCgocHJldikgPT4gcHJldiArIDEpO1xuXHRcdFx0c2V0VGVzdChibG9ja3NbYmxvY2tJbmRleF0pO1xuXHRcdH0sIDUwMCk7XG5cblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHRsZXQgY3VycmVudCA9IGJsb2Nrc1tibG9ja0luZGV4XTtcblx0bGV0IHByZXYgPSBibG9ja3NbYmxvY2tJbmRleCAtIDFdO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHQ8VGV4dD57YmxvY2tJbmRleH08L1RleHQ+XG5cdFx0XHQ8VGV4dD57dGVzdH08L1RleHQ+XG5cdFx0XHR7YmxvY2tzLm1hcCgoYmxvY2ssIGluZGV4KSA9PiAoXG5cdFx0XHRcdDxCb3hcblx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdGJvcmRlclN0eWxlPVwicm91bmRcIlxuXHRcdFx0XHRcdGhlaWdodD17YmxvY2suaGVpZ2h0fVxuXHRcdFx0XHRcdHdpZHRoPVwiNVwiXG5cdFx0XHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I9e1xuXHRcdFx0XHRcdFx0YmxvY2tJbmRleCA9PSBpbmRleCB8fCBibG9ja0luZGV4IC0gMSA9PSBpbmRleCA/IFwiZ3JlZW5cIiA6IFwid2hpdGVcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0PjwvQm94PlxuXHRcdFx0KSl9XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3Q7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFFQyxRQUFGO0VBQVlDO0FBQVosSUFBMEJGLE9BQU8sQ0FBQyxPQUFELENBQXZDOztBQUNBLE1BQU07RUFBRUcsUUFBRjtFQUFZQyxNQUFaO0VBQW9CQyxRQUFwQjtFQUE4QkMsSUFBOUI7RUFBb0NDO0FBQXBDLElBQTRDUCxPQUFPLENBQUMsS0FBRCxDQUF6RDs7QUFFQSxNQUFNUSxLQUFLLEdBQUcsQ0FBQztFQUFFQyxLQUFLLEVBQUU7QUFBVCxDQUFELEVBQWlCO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpCLEVBQWlDO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpDLENBQWQ7QUFDQSxNQUFNQyxNQUFNLEdBQUcsRUFBZjs7QUFFQSxNQUFNQyxJQUFJLEdBQUcsTUFBTTtFQUNsQixNQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlosUUFBUSxDQUFDLEVBQUQsQ0FBbEM7RUFDQSxNQUFNLENBQUNhLE9BQUQsRUFBVUMsVUFBVixJQUF3QmQsUUFBUSxDQUFDLENBQUQsQ0FBdEM7RUFDQSxNQUFNLENBQUNlLFVBQUQsRUFBYUMsYUFBYixJQUE4QmhCLFFBQVEsQ0FBQyxDQUFELENBQTVDO0VBQ0EsTUFBTSxDQUFDaUIsSUFBRCxFQUFPQyxPQUFQLElBQWtCbEIsUUFBUSxDQUFDLENBQUQsQ0FBaEM7RUFFQUUsUUFBUSxDQUFDLENBQUNpQixLQUFELEVBQVFDLEdBQVIsS0FBZ0I7SUFDeEIsSUFBSUQsS0FBSyxLQUFLLEdBQWQsRUFBbUI7TUFDbEJFLElBQUk7SUFDSjtFQUNELENBSk8sQ0FBUjs7RUFNQSxNQUFNQyxvQkFBb0IsR0FBRyxNQUFNO0lBQ2xDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtNQUM1QixJQUFJQyxLQUFLLEdBQUc7UUFDWEMsS0FBSyxFQUFFRixDQURJO1FBRVhHLE1BQU0sRUFBRUMsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLEVBRmI7UUFHWEMsVUFBVSxFQUFFO01BSEQsQ0FBWjtNQUtBcEIsTUFBTSxDQUFDcUIsSUFBUCxDQUFZTixLQUFaO0lBQ0E7RUFDRCxDQVREOztFQVdBdkIsU0FBUyxDQUFDLE1BQU07SUFDZnFCLG9CQUFvQjtJQUNwQixNQUFNUyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO01BQy9CaEIsYUFBYSxDQUFFaUIsSUFBRCxJQUFVQSxJQUFJLEdBQUcsQ0FBbEIsQ0FBYjtNQUNBZixPQUFPLENBQUNULE1BQU0sQ0FBQ00sVUFBRCxDQUFQLENBQVA7SUFDQSxDQUh3QixFQUd0QixHQUhzQixDQUF6QjtJQUtBLE9BQU8sTUFBTW1CLGFBQWEsQ0FBQ0gsS0FBRCxDQUExQjtFQUNBLENBUlEsRUFRTixFQVJNLENBQVQ7RUFVQSxJQUFJSSxPQUFPLEdBQUcxQixNQUFNLENBQUNNLFVBQUQsQ0FBcEI7RUFDQSxJQUFJa0IsSUFBSSxHQUFHeEIsTUFBTSxDQUFDTSxVQUFVLEdBQUcsQ0FBZCxDQUFqQjtFQUVBLG9CQUNDLG9CQUFDLEdBQUQ7SUFBSyxhQUFhLEVBQUM7RUFBbkIsZ0JBQ0Msb0JBQUMsSUFBRCxRQUFPQSxVQUFQLENBREQsZUFFQyxvQkFBQyxJQUFELFFBQU9FLElBQVAsQ0FGRCxFQUdFUixNQUFNLENBQUMyQixHQUFQLENBQVcsQ0FBQ1osS0FBRCxFQUFRQyxLQUFSLGtCQUNYLG9CQUFDLEdBQUQ7SUFDQyxHQUFHLEVBQUVBLEtBRE47SUFFQyxXQUFXLEVBQUMsT0FGYjtJQUdDLE1BQU0sRUFBRUQsS0FBSyxDQUFDRSxNQUhmO0lBSUMsS0FBSyxFQUFDLEdBSlA7SUFLQyxVQUFVLEVBQUMsUUFMWjtJQU1DLFdBQVcsRUFDVlgsVUFBVSxJQUFJVSxLQUFkLElBQXVCVixVQUFVLEdBQUcsQ0FBYixJQUFrQlUsS0FBekMsR0FBaUQsT0FBakQsR0FBMkQ7RUFQN0QsRUFEQSxDQUhGLENBREQ7QUFrQkEsQ0F0REQ7O0FBd0RBWSxNQUFNLENBQUNDLE9BQVAsR0FBaUI1QixJQUFqQiJ9
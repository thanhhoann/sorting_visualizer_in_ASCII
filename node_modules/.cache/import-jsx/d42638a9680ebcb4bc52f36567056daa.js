"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  const [isRunning, setIsRunning] = useState(false);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 15; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    setIsRunning(true);
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 50);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[i].height > blocks[j].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j < blocks.length) {
      if (j == i + 1) setJ(i);else setJ(i + 1);
      setI(prev => prev + 1);
    }

    if (i < blocks.length) {
      setI(0);
      setJ(0);
    }
  }, [j]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: (i == index || j == index) && isRunning == true ? "green" : "white"
  }))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiaSIsInNldEkiLCJqIiwic2V0SiIsImV4aXQiLCJpc1J1bm5pbmciLCJzZXRJc1J1bm5pbmciLCJpbnB1dCIsImtleSIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwidGVtcCIsImxlbmd0aCIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBUZXN0ID0gKCkgPT4ge1xuXHRjb25zdCBbaSwgc2V0SV0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2osIHNldEpdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IHsgZXhpdCB9ID0gdXNlQXBwKCk7XG5cblx0Y29uc3QgW2lzUnVubmluZywgc2V0SXNSdW5uaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTU7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGlzU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0fTtcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdHNldElzUnVubmluZyh0cnVlKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEooKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCA1MCk7XG5cblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmIChibG9ja3NbaV0uaGVpZ2h0ID4gYmxvY2tzW2pdLmhlaWdodCkge1xuXHRcdFx0bGV0IHRlbXAgPSBibG9ja3NbaV07XG5cdFx0XHRibG9ja3NbaV0gPSBibG9ja3Nbal07XG5cdFx0XHRibG9ja3Nbal0gPSB0ZW1wO1xuXHRcdH1cblxuXHRcdGlmIChqIDwgYmxvY2tzLmxlbmd0aCkge1xuXHRcdFx0aWYgKGogPT0gaSArIDEpIHNldEooaSk7XG5cdFx0XHRlbHNlIHNldEooaSArIDEpO1xuXHRcdFx0c2V0SSgocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH1cblxuXHRcdGlmIChpIDwgYmxvY2tzLmxlbmd0aCkge1xuXHRcdFx0c2V0SSgwKTtcblx0XHRcdHNldEooMCk7XG5cdFx0fVxuXHR9LCBbal0pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0XHRtYXJnaW49XCIxXCJcblx0XHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRcdGhlaWdodD17YmxvY2suaGVpZ2h0fVxuXHRcdFx0XHRcdFx0d2lkdGg9XCI1XCJcblx0XHRcdFx0XHRcdGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuXHRcdFx0XHRcdFx0Ym9yZGVyQ29sb3I9e1xuXHRcdFx0XHRcdFx0XHQoaSA9PSBpbmRleCB8fCBqID09IGluZGV4KSAmJiBpc1J1bm5pbmcgPT0gdHJ1ZVxuXHRcdFx0XHRcdFx0XHRcdD8gXCJncmVlblwiXG5cdFx0XHRcdFx0XHRcdFx0OiBcIndoaXRlXCJcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQ+PC9Cb3g+XG5cdFx0XHRcdCkpfVxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3Q7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFFQyxRQUFGO0VBQVlDO0FBQVosSUFBMEJGLE9BQU8sQ0FBQyxPQUFELENBQXZDOztBQUNBLE1BQU07RUFBRUcsUUFBRjtFQUFZQyxNQUFaO0VBQW9CQyxRQUFwQjtFQUE4QkMsSUFBOUI7RUFBb0NDO0FBQXBDLElBQTRDUCxPQUFPLENBQUMsS0FBRCxDQUF6RDs7QUFDQSxNQUFNUSxPQUFPLEdBQUdS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
"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];

const Focus = () => {
  const [content, setContent] = useState("");
  const {
    exit
  } = useApp();
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    padding: 1
  }, /*#__PURE__*/React.createElement(Box, {
    marginBottom: 1
  }), items.map((item, index) => /*#__PURE__*/React.createElement(Item, {
    key: index,
    label: item.label,
    getFocusedItem: e => setContent(e)
  })), /*#__PURE__*/React.createElement(Text, null, content));
};

const Item = ({
  label,
  getFocusedItem
}) => {
  const {
    isFocused
  } = useFocus();
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }

    if (key.return) {
      isFocused && getFocusedItem(label);
    }
  });
  return /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: isFocused ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, label));
};

const App = () => {
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Focus, null));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsIkZvY3VzIiwiY29udGVudCIsInNldENvbnRlbnQiLCJleGl0IiwibWFwIiwiaXRlbSIsImluZGV4IiwiZSIsIkl0ZW0iLCJnZXRGb2N1c2VkSXRlbSIsImlzRm9jdXNlZCIsImlucHV0Iiwia2V5IiwicmV0dXJuIiwiQXBwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5cbmNvbnN0IEZvY3VzID0gKCkgPT4ge1xuXHRjb25zdCBbY29udGVudCwgc2V0Q29udGVudF0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgeyBleGl0IH0gPSB1c2VBcHAoKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIHBhZGRpbmc9ezF9PlxuXHRcdFx0PEJveCBtYXJnaW5Cb3R0b209ezF9PjwvQm94PlxuXHRcdFx0e2l0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcblx0XHRcdFx0PEl0ZW1cblx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdGxhYmVsPXtpdGVtLmxhYmVsfVxuXHRcdFx0XHRcdGdldEZvY3VzZWRJdGVtPXsoZSkgPT4gc2V0Q29udGVudChlKX1cblx0XHRcdFx0Lz5cblx0XHRcdCkpfVxuXHRcdFx0PFRleHQ+e2NvbnRlbnR9PC9UZXh0PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxuY29uc3QgSXRlbSA9ICh7IGxhYmVsLCBnZXRGb2N1c2VkSXRlbSB9KSA9PiB7XG5cdGNvbnN0IHsgaXNGb2N1c2VkIH0gPSB1c2VGb2N1cygpO1xuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cblx0XHRpZiAoa2V5LnJldHVybikge1xuXHRcdFx0aXNGb2N1c2VkICYmIGdldEZvY3VzZWRJdGVtKGxhYmVsKTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBib3JkZXJTdHlsZT1cInJvdW5kXCIgYm9yZGVyQ29sb3I9e2lzRm9jdXNlZCA/IFwiZ3JlZW5cIiA6IFwid2hpdGVcIn0+XG5cdFx0XHQ8VGV4dD57bGFiZWx9PC9UZXh0PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdDw+XG5cdFx0XHQ8Rm9jdXMgLz5cblx0XHQ8Lz5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBRUEsTUFBTVEsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQyxDQUFkOztBQUVBLE1BQU1DLEtBQUssR0FBRyxNQUFNO0VBQ25CLE1BQU0sQ0FBQ0MsT0FBRCxFQUFVQyxVQUFWLElBQXdCWCxRQUFRLENBQUMsRUFBRCxDQUF0QztFQUNBLE1BQU07SUFBRVk7RUFBRixJQUFXVCxNQUFNLEVBQXZCO0VBRUEsb0JBQ0Msb0JBQUMsR0FBRDtJQUFLLGFBQWEsRUFBQyxRQUFuQjtJQUE0QixPQUFPLEVBQUU7RUFBckMsZ0JBQ0Msb0JBQUMsR0FBRDtJQUFLLFlBQVksRUFBRTtFQUFuQixFQURELEVBRUVJLEtBQUssQ0FBQ00sR0FBTixDQUFVLENBQUNDLElBQUQsRUFBT0MsS0FBUCxrQkFDVixvQkFBQyxJQUFEO0lBQ0MsR0FBRyxFQUFFQSxLQUROO0lBRUMsS0FBSyxFQUFFRCxJQUFJLENBQUNOLEtBRmI7SUFHQyxjQUFjLEVBQUdRLENBQUQsSUFBT0wsVUFBVSxDQUFDSyxDQUFEO0VBSGxDLEVBREEsQ0FGRixlQVNDLG9CQUFDLElBQUQsUUFBT04sT0FBUCxDQVRELENBREQ7QUFhQSxDQWpCRDs7QUFtQkEsTUFBTU8sSUFBSSxHQUFHLENBQUM7RUFBRVQsS0FBRjtFQUFTVTtBQUFULENBQUQsS0FBK0I7RUFDM0MsTUFBTTtJQUFFQztFQUFGLElBQWdCZixRQUFRLEVBQTlCO0VBQ0FGLFFBQVEsQ0FBQyxDQUFDa0IsS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0lBQ3hCLElBQUlELEtBQUssS0FBSyxHQUFkLEVBQW1CO01BQ2xCUixJQUFJO0lBQ0o7O0lBRUQsSUFBSVMsR0FBRyxDQUFDQyxNQUFSLEVBQWdCO01BQ2ZILFNBQVMsSUFBSUQsY0FBYyxDQUFDVixLQUFELENBQTNCO0lBQ0E7RUFDRCxDQVJPLENBQVI7RUFVQSxvQkFDQyxvQkFBQyxHQUFEO0lBQUssV0FBVyxFQUFDLE9BQWpCO0lBQXlCLFdBQVcsRUFBRVcsU0FBUyxHQUFHLE9BQUgsR0FBYTtFQUE1RCxnQkFDQyxvQkFBQyxJQUFELFFBQU9YLEtBQVAsQ0FERCxDQUREO0FBS0EsQ0FqQkQ7O0FBbUJBLE1BQU1lLEdBQUcsR0FBRyxNQUFNO0VBQ2pCLG9CQUNDLHVEQUNDLG9CQUFDLEtBQUQsT0FERCxDQUREO0FBS0EsQ0FORDs7QUFRQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixHQUFqQiJ9
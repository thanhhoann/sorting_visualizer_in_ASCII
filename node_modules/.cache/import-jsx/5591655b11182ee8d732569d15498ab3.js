"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 1; i < 20; i++) {
      let block = {
        index: i,
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  let current = blocks[blockIndex];
  let prev = blocks[blockIndex - 1];
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, blockIndex), /*#__PURE__*/React.createElement(Text, null, current.height, " ", /*#__PURE__*/React.createElement(Text, null, current.height > prev.height ? ">" : "<"), prev.height), blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    borderColor: blockIndex == index || blockIndex - 1 == index ? "green" : "white",
    alignItems: "center"
  })));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsImlucHV0Iiwia2V5IiwiZXhpdCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiaSIsImJsb2NrIiwiaW5kZXgiLCJoZWlnaHQiLCJNYXRoIiwicmFuZG9tIiwiaXNTZWxlY3RlZCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwicHJldiIsImNsZWFySW50ZXJ2YWwiLCJjdXJyZW50IiwibWFwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VJbnB1dCwgdXNlQXBwLCB1c2VGb2N1cywgVGV4dCwgQm94IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBUZXN0ID0gKCkgPT4ge1xuXHRjb25zdCBbY29sb3IsIHNldENvbG9yXSA9IHVzZVN0YXRlKFwiXCIpO1xuXHRjb25zdCBbY291bnRlciwgc2V0Q291bnRlcl0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2Jsb2NrSW5kZXgsIHNldEJsb2NrSW5kZXhdID0gdXNlU3RhdGUoMCk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRpZiAoaW5wdXQgPT09IFwicVwiKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCBnZW5lcmF0ZVJhbmRvbUJsb2NrcyA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IDIwOyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdGhlaWdodDogTWF0aC5yYW5kb20oKSAqIDEwLFxuXHRcdFx0XHRpc1NlbGVjdGVkOiBmYWxzZSxcblx0XHRcdH07XG5cdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0fVxuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Z2VuZXJhdGVSYW5kb21CbG9ja3MoKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEJsb2NrSW5kZXgoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCA1MDApO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0bGV0IGN1cnJlbnQgPSBibG9ja3NbYmxvY2tJbmRleF07XG5cdGxldCBwcmV2ID0gYmxvY2tzW2Jsb2NrSW5kZXggLSAxXTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuXHRcdFx0PFRleHQ+e2Jsb2NrSW5kZXh9PC9UZXh0PlxuXHRcdFx0PFRleHQ+XG5cdFx0XHRcdHtjdXJyZW50LmhlaWdodH0gPFRleHQ+e2N1cnJlbnQuaGVpZ2h0ID4gcHJldi5oZWlnaHQgPyBcIj5cIiA6IFwiPFwifTwvVGV4dD5cblx0XHRcdFx0e3ByZXYuaGVpZ2h0fVxuXHRcdFx0PC9UZXh0PlxuXHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHR3aWR0aD1cIjVcIlxuXHRcdFx0XHRcdGJvcmRlckNvbG9yPXtcblx0XHRcdFx0XHRcdGJsb2NrSW5kZXggPT0gaW5kZXggfHwgYmxvY2tJbmRleCAtIDEgPT0gaW5kZXggPyBcImdyZWVuXCIgOiBcIndoaXRlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXG5cdFx0XHRcdD48L0JveD5cblx0XHRcdCkpfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBRUEsTUFBTVEsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQyxDQUFkO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBRUEsTUFBTUMsSUFBSSxHQUFHLE1BQU07RUFDbEIsTUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JaLFFBQVEsQ0FBQyxFQUFELENBQWxDO0VBQ0EsTUFBTSxDQUFDYSxPQUFELEVBQVVDLFVBQVYsSUFBd0JkLFFBQVEsQ0FBQyxDQUFELENBQXRDO0VBQ0EsTUFBTSxDQUFDZSxVQUFELEVBQWFDLGFBQWIsSUFBOEJoQixRQUFRLENBQUMsQ0FBRCxDQUE1QztFQUVBRSxRQUFRLENBQUMsQ0FBQ2UsS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0lBQ3hCLElBQUlELEtBQUssS0FBSyxHQUFkLEVBQW1CO01BQ2xCRSxJQUFJO0lBQ0o7RUFDRCxDQUpPLENBQVI7O0VBTUEsTUFBTUMsb0JBQW9CLEdBQUcsTUFBTTtJQUNsQyxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7TUFDNUIsSUFBSUMsS0FBSyxHQUFHO1FBQ1hDLEtBQUssRUFBRUYsQ0FESTtRQUVYRyxNQUFNLEVBQUVDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixFQUZiO1FBR1hDLFVBQVUsRUFBRTtNQUhELENBQVo7TUFLQWxCLE1BQU0sQ0FBQ21CLElBQVAsQ0FBWU4sS0FBWjtJQUNBO0VBQ0QsQ0FURDs7RUFXQXJCLFNBQVMsQ0FBQyxNQUFNO0lBQ2ZtQixvQkFBb0I7SUFDcEIsTUFBTVMsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtNQUMvQmQsYUFBYSxDQUFFZSxJQUFELElBQVVBLElBQUksR0FBRyxDQUFsQixDQUFiO0lBQ0EsQ0FGd0IsRUFFdEIsR0FGc0IsQ0FBekI7SUFJQSxPQUFPLE1BQU1DLGFBQWEsQ0FBQ0gsS0FBRCxDQUExQjtFQUNBLENBUFEsRUFPTixFQVBNLENBQVQ7RUFTQSxJQUFJSSxPQUFPLEdBQUd4QixNQUFNLENBQUNNLFVBQUQsQ0FBcEI7RUFDQSxJQUFJZ0IsSUFBSSxHQUFHdEIsTUFBTSxDQUFDTSxVQUFVLEdBQUcsQ0FBZCxDQUFqQjtFQUVBLG9CQUNDLG9CQUFDLEdBQUQ7SUFBSyxhQUFhLEVBQUM7RUFBbkIsZ0JBQ0Msb0JBQUMsSUFBRCxRQUFPQSxVQUFQLENBREQsZUFFQyxvQkFBQyxJQUFELFFBQ0VrQixPQUFPLENBQUNULE1BRFYsb0JBQ2tCLG9CQUFDLElBQUQsUUFBT1MsT0FBTyxDQUFDVCxNQUFSLEdBQWlCTyxJQUFJLENBQUNQLE1BQXRCLEdBQStCLEdBQS9CLEdBQXFDLEdBQTVDLENBRGxCLEVBRUVPLElBQUksQ0FBQ1AsTUFGUCxDQUZELEVBTUVmLE1BQU0sQ0FBQ3lCLEdBQVAsQ0FBVyxDQUFDWixLQUFELEVBQVFDLEtBQVIsa0JBQ1gsb0JBQUMsR0FBRDtJQUNDLEdBQUcsRUFBRUEsS0FETjtJQUVDLFdBQVcsRUFBQyxPQUZiO0lBR0MsTUFBTSxFQUFFRCxLQUFLLENBQUNFLE1BSGY7SUFJQyxLQUFLLEVBQUMsR0FKUDtJQUtDLFdBQVcsRUFDVlQsVUFBVSxJQUFJUSxLQUFkLElBQXVCUixVQUFVLEdBQUcsQ0FBYixJQUFrQlEsS0FBekMsR0FBaUQsT0FBakQsR0FBMkQsT0FON0Q7SUFRQyxVQUFVLEVBQUM7RUFSWixFQURBLENBTkYsQ0FERDtBQXFCQSxDQXZERDs7QUF5REFZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFCLElBQWpCIn0=
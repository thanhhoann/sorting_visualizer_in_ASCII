"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const [test, setTest] = useState(0);
  const [current, setCurrent] = useState(0);
  const [prev, setPrev] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 15; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[i].height < blocks[j].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length) {
      setJ(i + 1);
      setI(prev => prev + 1);
    }
  }, [j]);
  let text = `${i} ${j}`;
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, text), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: i == index || j == index ? "green" : "white"
  }))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiY29sb3IiLCJzZXRDb2xvciIsImNvdW50ZXIiLCJzZXRDb3VudGVyIiwiaSIsInNldEkiLCJqIiwic2V0SiIsInRlc3QiLCJzZXRUZXN0IiwiY3VycmVudCIsInNldEN1cnJlbnQiLCJwcmV2Iiwic2V0UHJldiIsImlucHV0Iiwia2V5IiwiZXhpdCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ0ZW1wIiwibGVuZ3RoIiwidGV4dCIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBUZXN0ID0gKCkgPT4ge1xuXHRjb25zdCBbY29sb3IsIHNldENvbG9yXSA9IHVzZVN0YXRlKFwiXCIpO1xuXHRjb25zdCBbY291bnRlciwgc2V0Q291bnRlcl0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2ksIHNldEldID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtqLCBzZXRKXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbdGVzdCwgc2V0VGVzdF0gPSB1c2VTdGF0ZSgwKTtcblxuXHRjb25zdCBbY3VycmVudCwgc2V0Q3VycmVudF0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW3ByZXYsIHNldFByZXZdID0gdXNlU3RhdGUoMCk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRpZiAoaW5wdXQgPT09IFwicVwiKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCBnZW5lcmF0ZVJhbmRvbUJsb2NrcyA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDE1OyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdGhlaWdodDogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTApLFxuXHRcdFx0XHRpc1NlbGVjdGVkOiBmYWxzZSxcblx0XHRcdH07XG5cdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0fVxuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Z2VuZXJhdGVSYW5kb21CbG9ja3MoKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEooKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCA1MDApO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAoYmxvY2tzW2ldLmhlaWdodCA8IGJsb2Nrc1tqXS5oZWlnaHQpIHtcblx0XHRcdGxldCB0ZW1wID0gYmxvY2tzW2ldO1xuXHRcdFx0YmxvY2tzW2ldID0gYmxvY2tzW2pdO1xuXHRcdFx0YmxvY2tzW2pdID0gdGVtcDtcblx0XHR9XG5cblx0XHRpZiAoaiA9PSBibG9ja3MubGVuZ3RoKSB7XG5cdFx0XHRzZXRKKGkgKyAxKTtcblx0XHRcdHNldEkoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9XG5cdH0sIFtqXSk7XG5cblx0bGV0IHRleHQgPSBgJHtpfSAke2p9YDtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cblx0XHRcdDxUZXh0Pnt0ZXh0fTwvVGV4dD5cblxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0XHRtYXJnaW49XCIxXCJcblx0XHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRcdGhlaWdodD17YmxvY2suaGVpZ2h0fVxuXHRcdFx0XHRcdFx0d2lkdGg9XCI1XCJcblx0XHRcdFx0XHRcdGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuXHRcdFx0XHRcdFx0Ym9yZGVyQ29sb3I9e2kgPT0gaW5kZXggfHwgaiA9PSBpbmRleCA/IFwiZ3JlZW5cIiA6IFwid2hpdGVcIn1cblx0XHRcdFx0XHQ+PC9Cb3g+XG5cdFx0XHRcdCkpfVxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3Q7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFFQyxRQUFGO0VBQVlDO0FBQVosSUFBMEJGLE9BQU8sQ0FBQyxPQUFELENBQXZDOztBQUNBLE1BQU07RUFBRUcsUUFBRjtFQUFZQyxNQUFaO0VBQW9CQyxRQUFwQjtFQUE4QkMsSUFBOUI7RUFBb0NDO0FBQXBDLElBQTRD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
"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);

  const generateRandomBlocks = () => {
    for (let i = 1; i < 20; i++) {
      let block = {
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
      blocks[blockIndex].isSelected = true;
    }, 500);
    return () => clearInterval(timer);
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    borderColor: block.isSelected ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, Math.round(block.height)))), /*#__PURE__*/React.createElement(Text, null, blockIndex));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiaSIsImJsb2NrIiwiaGVpZ2h0IiwiTWF0aCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwibWFwIiwiaW5kZXgiLCJyb3VuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtibG9ja0luZGV4LCBzZXRCbG9ja0luZGV4XSA9IHVzZVN0YXRlKDApO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgMjA7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRoZWlnaHQ6IE1hdGgucmFuZG9tKCkgKiAxMCxcblx0XHRcdFx0aXNTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHR9O1xuXHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdH1cblx0fTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGdlbmVyYXRlUmFuZG9tQmxvY2tzKCk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRCbG9ja0luZGV4KChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0XHRibG9ja3NbYmxvY2tJbmRleF0uaXNTZWxlY3RlZCA9IHRydWU7XG5cdFx0fSwgNTAwKTtcblxuXHRcdHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHRpbWVyKTtcblx0fSwgW10pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHR7YmxvY2tzLm1hcCgoYmxvY2ssIGluZGV4KSA9PiAoXG5cdFx0XHRcdDxCb3hcblx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdGJvcmRlclN0eWxlPVwicm91bmRcIlxuXHRcdFx0XHRcdGhlaWdodD17YmxvY2suaGVpZ2h0fVxuXHRcdFx0XHRcdHdpZHRoPVwiNVwiXG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I9e2Jsb2NrLmlzU2VsZWN0ZWQgPyBcImdyZWVuXCIgOiBcIndoaXRlXCJ9XG5cdFx0XHRcdD5cblx0XHRcdFx0XHQ8VGV4dD57TWF0aC5yb3VuZChibG9jay5oZWlnaHQpfTwvVGV4dD5cblx0XHRcdFx0PC9Cb3g+XG5cdFx0XHQpKX1cblx0XHRcdDxUZXh0PntibG9ja0luZGV4fTwvVGV4dD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUVBLE1BQU1RLEtBQUssR0FBRyxDQUFDO0VBQUVDLEtBQUssRUFBRTtBQUFULENBQUQsRUFBaUI7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakIsRUFBaUM7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakMsQ0FBZDtBQUNBLE1BQU1DLE1BQU0sR0FBRyxFQUFmOztBQUVBLE1BQU1DLElBQUksR0FBRyxNQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWixRQUFRLENBQUMsRUFBRCxDQUFsQztFQUNBLE1BQU0sQ0FBQ2EsT0FBRCxFQUFVQyxVQUFWLElBQXdCZCxRQUFRLENBQUMsQ0FBRCxDQUF0QztFQUNBLE1BQU0sQ0FBQ2UsVUFBRCxFQUFhQyxhQUFiLElBQThCaEIsUUFBUSxDQUFDLENBQUQsQ0FBNUM7O0VBRUEsTUFBTWlCLG9CQUFvQixHQUFHLE1BQU07SUFDbEMsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO01BQzVCLElBQUlDLEtBQUssR0FBRztRQUNYQyxNQUFNLEVBQUVDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixFQURiO1FBRVhDLFVBQVUsRUFBRTtNQUZELENBQVo7TUFJQWQsTUFBTSxDQUFDZSxJQUFQLENBQVlMLEtBQVo7SUFDQTtFQUNELENBUkQ7O0VBVUFsQixTQUFTLENBQUMsTUFBTTtJQUNmZ0Isb0JBQW9CO0lBQ3BCLE1BQU1RLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07TUFDL0JWLGFBQWEsQ0FBRVcsSUFBRCxJQUFVQSxJQUFJLEdBQUcsQ0FBbEIsQ0FBYjtNQUNBbEIsTUFBTSxDQUFDTSxVQUFELENBQU4sQ0FBbUJRLFVBQW5CLEdBQWdDLElBQWhDO0lBQ0EsQ0FId0IsRUFHdEIsR0FIc0IsQ0FBekI7SUFLQSxPQUFPLE1BQU1LLGFBQWEsQ0FBQ0gsS0FBRCxDQUExQjtFQUNBLENBUlEsRUFRTixFQVJNLENBQVQ7RUFVQSxvQkFDQyxvQkFBQyxHQUFEO0lBQUssYUFBYSxFQUFDO0VBQW5CLEdBQ0VoQixNQUFNLENBQUNvQixHQUFQLENBQVcsQ0FBQ1YsS0FBRCxFQUFRVyxLQUFSLGtCQUNYLG9CQUFDLEdBQUQ7SUFDQyxHQUFHLEVBQUVBLEtBRE47SUFFQyxXQUFXLEVBQUMsT0FGYjtJQUdDLE1BQU0sRUFBRVgsS0FBSyxDQUFDQyxNQUhmO0lBSUMsS0FBSyxFQUFDLEdBSlA7SUFLQyxXQUFXLEVBQUVELEtBQUssQ0FBQ0ksVUFBTixHQUFtQixPQUFuQixHQUE2QjtFQUwzQyxnQkFPQyxvQkFBQyxJQUFELFFBQU9GLElBQUksQ0FBQ1UsS0FBTCxDQUFXWixLQUFLLENBQUNDLE1BQWpCLENBQVAsQ0FQRCxDQURBLENBREYsZUFZQyxvQkFBQyxJQUFELFFBQU9MLFVBQVAsQ0FaRCxDQUREO0FBZ0JBLENBekNEOztBQTJDQWlCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLElBQWpCIn0=
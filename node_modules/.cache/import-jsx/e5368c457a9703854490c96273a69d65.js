"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const BurbleSort = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  const [isRunning, setIsRunning] = useState(false);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 30; i++) {
      let block = {
        height: Math.round(Math.random() * 10),
        content: ""
      };
      let s = "";
      let temp = block.height;

      while (temp--) {
        s += "*";
      }

      block.content = s;
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    setIsRunning(true);
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 100);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[j].height > blocks[i].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      if (j == i + 1) setJ(i);else setJ(i + 1);
      setI(prev => prev + 1);
    }

    if (i == blocks.length - 1) {
      setI(0);
      setJ(0);
      setIsRunning(false);
    }
  }, [j]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    height: block.height,
    borderStyle: "single",
    width: "1",
    alignItems: "center",
    borderColor: (i == index || j == index) && isRunning == true ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, block.content)))));
};

module.exports = BurbleSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJCdXJibGVTb3J0IiwiaSIsInNldEkiLCJqIiwic2V0SiIsImV4aXQiLCJpc1J1bm5pbmciLCJzZXRJc1J1bm5pbmciLCJpbnB1dCIsImtleSIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJoZWlnaHQiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJjb250ZW50IiwicyIsInRlbXAiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwibGVuZ3RoIiwibWFwIiwiaW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQnVyYmxlU29ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZShcImluay1iaWctdGV4dFwiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgQnVyYmxlU29ydCA9ICgpID0+IHtcblx0Y29uc3QgW2ksIHNldEldID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtqLCBzZXRKXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCB7IGV4aXQgfSA9IHVzZUFwcCgpO1xuXG5cdGNvbnN0IFtpc1J1bm5pbmcsIHNldElzUnVubmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRpZiAoaW5wdXQgPT09IFwicVwiKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCBnZW5lcmF0ZVJhbmRvbUJsb2NrcyA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDMwOyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGNvbnRlbnQ6IFwiXCIsXG5cdFx0XHR9O1xuXG5cdFx0XHRsZXQgcyA9IFwiXCI7XG4gICAgICAgICAgICAgICBsZXQgdGVtcCA9IGJsb2NrLmhlaWdodFxuXHRcdFx0d2hpbGUgKHRlbXAtLSkge1xuXHRcdFx0XHRzICs9IFwiKlwiO1xuXHRcdFx0fVxuXG5cdFx0XHRibG9jay5jb250ZW50ID0gcztcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdHNldElzUnVubmluZyh0cnVlKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEooKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCAxMDApO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAoYmxvY2tzW2pdLmhlaWdodCA+IGJsb2Nrc1tpXS5oZWlnaHQpIHtcblx0XHRcdGxldCB0ZW1wID0gYmxvY2tzW2ldO1xuXHRcdFx0YmxvY2tzW2ldID0gYmxvY2tzW2pdO1xuXHRcdFx0YmxvY2tzW2pdID0gdGVtcDtcblx0XHR9XG5cblx0XHRpZiAoaiA9PSBibG9ja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0aWYgKGogPT0gaSArIDEpIHNldEooaSk7XG5cdFx0XHRlbHNlIHNldEooaSArIDEpO1xuXHRcdFx0c2V0SSgocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH1cblxuXHRcdGlmIChpID09IGJsb2Nrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRzZXRJKDApO1xuXHRcdFx0c2V0SigwKTtcblx0XHRcdHNldElzUnVubmluZyhmYWxzZSk7XG5cdFx0fVxuXHR9LCBbal0pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0XHRtYXJnaW49XCIxXCJcblx0XHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHRcdGJvcmRlclN0eWxlPVwic2luZ2xlXCJcblx0XHRcdFx0XHRcdHdpZHRoPVwiMVwiXG5cdFx0XHRcdFx0XHRhbGlnbkl0ZW1zPVwiY2VudGVyXCJcblx0XHRcdFx0XHRcdGJvcmRlckNvbG9yPXtcblx0XHRcdFx0XHRcdFx0KGkgPT0gaW5kZXggfHwgaiA9PSBpbmRleCkgJiYgaXNSdW5uaW5nID09IHRydWVcblx0XHRcdFx0XHRcdFx0XHQ/IFwiZ3JlZW5cIlxuXHRcdFx0XHRcdFx0XHRcdDogXCJ3aGl0ZVwiXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0PFRleHQ+e2Jsb2NrLmNvbnRlbnR9PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpKX1cblx0XHRcdDwvQm94PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdXJibGVTb3J0O1xuIl0sIm1h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
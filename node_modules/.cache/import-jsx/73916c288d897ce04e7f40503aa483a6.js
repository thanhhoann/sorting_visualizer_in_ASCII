"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const [test, setTest] = useState(0);
  const [current, setCurrent] = useState(0);
  const [prev, setPrev] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 15; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 200);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[i].height < blocks[j].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      setJ(i + 1);
      setI(prev => prev + 1);
    }
  }, [j]);
  let text = `${i} ${j}`;
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, text), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: i == index || j == index ? "green" : "white"
  }))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiY29sb3IiLCJzZXRDb2xvciIsImNvdW50ZXIiLCJzZXRDb3VudGVyIiwiaSIsInNldEkiLCJqIiwic2V0SiIsInRlc3QiLCJzZXRUZXN0IiwiY3VycmVudCIsInNldEN1cnJlbnQiLCJwcmV2Iiwic2V0UHJldiIsImlucHV0Iiwia2V5IiwiZXhpdCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ0ZW1wIiwibGVuZ3RoIiwidGV4dCIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBUZXN0ID0gKCkgPT4ge1xuXHRjb25zdCBbY29sb3IsIHNldENvbG9yXSA9IHVzZVN0YXRlKFwiXCIpO1xuXHRjb25zdCBbY291bnRlciwgc2V0Q291bnRlcl0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2ksIHNldEldID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtqLCBzZXRKXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbdGVzdCwgc2V0VGVzdF0gPSB1c2VTdGF0ZSgwKTtcblxuXHRjb25zdCBbY3VycmVudCwgc2V0Q3VycmVudF0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW3ByZXYsIHNldFByZXZdID0gdXNlU3RhdGUoMCk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRpZiAoaW5wdXQgPT09IFwicVwiKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCBnZW5lcmF0ZVJhbmRvbUJsb2NrcyA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDE1OyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdGhlaWdodDogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTApLFxuXHRcdFx0XHRpc1NlbGVjdGVkOiBmYWxzZSxcblx0XHRcdH07XG5cdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0fVxuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Z2VuZXJhdGVSYW5kb21CbG9ja3MoKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEooKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCAyMDApO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAoYmxvY2tzW2ldLmhlaWdodCA8IGJsb2Nrc1tqXS5oZWlnaHQpIHtcblx0XHRcdGxldCB0ZW1wID0gYmxvY2tzW2ldO1xuXHRcdFx0YmxvY2tzW2ldID0gYmxvY2tzW2pdO1xuXHRcdFx0YmxvY2tzW2pdID0gdGVtcDtcblx0XHR9XG5cblx0XHRpZiAoaiA9PSBibG9ja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0c2V0SihpICsgMSk7XG5cdFx0XHRzZXRJKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fVxuXHR9LCBbal0pO1xuXG5cdGxldCB0ZXh0ID0gYCR7aX0gJHtqfWA7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG5cdFx0XHQ8VGV4dD57dGV4dH08L1RleHQ+XG5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiPlxuXHRcdFx0XHR7YmxvY2tzLm1hcCgoYmxvY2ssIGluZGV4KSA9PiAoXG5cdFx0XHRcdFx0PEJveFxuXHRcdFx0XHRcdFx0bWFyZ2luPVwiMVwiXG5cdFx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdFx0Ym9yZGVyU3R5bGU9XCJyb3VuZFwiXG5cdFx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHRcdHdpZHRoPVwiNVwiXG5cdFx0XHRcdFx0XHRhbGlnbkl0ZW1zPVwiY2VudGVyXCJcblx0XHRcdFx0XHRcdGJvcmRlckNvbG9yPXtpID09IGluZGV4IHx8IGogPT0gaW5kZXggPyBcImdyZWVuXCIgOiBcIndoaXRlXCJ9XG5cdFx0XHRcdFx0PjwvQm94PlxuXHRcdFx0XHQpKX1cblx0XHRcdDwvQm94PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJ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
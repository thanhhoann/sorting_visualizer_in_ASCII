"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  const [isRunning, setIsRunning] = useState(false);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 15; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    setIsRunning(true);
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 100);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[i].height > blocks[j].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      if (j == i + 1) setJ(i);else setJ(i + 1);
      setI(prev => prev + 1);
    }

    if (i == blocks.length - 1) {
      setIsRunning(false);
      exit();
    }
  }, [j]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: i == index || j == index ? isRunning && "green" : "white"
  }))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiaSIsInNldEkiLCJqIiwic2V0SiIsImV4aXQiLCJpc1J1bm5pbmciLCJzZXRJc1J1bm5pbmciLCJpbnB1dCIsImtleSIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwidGVtcCIsImxlbmd0aCIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBUZXN0ID0gKCkgPT4ge1xuXHRjb25zdCBbaSwgc2V0SV0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2osIHNldEpdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IHsgZXhpdCB9ID0gdXNlQXBwKCk7XG5cblx0Y29uc3QgW2lzUnVubmluZywgc2V0SXNSdW5uaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTU7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGlzU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0fTtcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdHNldElzUnVubmluZyh0cnVlKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEooKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCAxMDApO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAoYmxvY2tzW2ldLmhlaWdodCA+IGJsb2Nrc1tqXS5oZWlnaHQpIHtcblx0XHRcdGxldCB0ZW1wID0gYmxvY2tzW2ldO1xuXHRcdFx0YmxvY2tzW2ldID0gYmxvY2tzW2pdO1xuXHRcdFx0YmxvY2tzW2pdID0gdGVtcDtcblx0XHR9XG5cblx0XHRpZiAoaiA9PSBibG9ja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0aWYgKGogPT0gaSArIDEpIHNldEooaSk7XG5cdFx0XHRlbHNlIHNldEooaSArIDEpO1xuXHRcdFx0c2V0SSgocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH1cblxuXHRcdGlmIChpID09IGJsb2Nrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRzZXRJc1J1bm5pbmcoZmFsc2UpO1xuXHRcdFx0ZXhpdCgpO1xuXHRcdH1cblx0fSwgW2pdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiPlxuXHRcdFx0XHR7YmxvY2tzLm1hcCgoYmxvY2ssIGluZGV4KSA9PiAoXG5cdFx0XHRcdFx0PEJveFxuXHRcdFx0XHRcdFx0bWFyZ2luPVwiMVwiXG5cdFx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdFx0Ym9yZGVyU3R5bGU9XCJyb3VuZFwiXG5cdFx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHRcdHdpZHRoPVwiNVwiXG5cdFx0XHRcdFx0XHRhbGlnbkl0ZW1zPVwiY2VudGVyXCJcblx0XHRcdFx0XHRcdGJvcmRlckNvbG9yPXtcblx0XHRcdFx0XHRcdFx0aSA9PSBpbmRleCB8fCBqID09IGluZGV4ID8gaXNSdW5uaW5nICYmIFwiZ3JlZW5cIiA6IFwid2hpdGVcIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdD48L0JveD5cblx0XHRcdFx0KSl9XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUNBLE1BQU1RLE9BQU8sR0FBR1IsT0FBTyxDQUFDLGNBQUQsQ0FBdkI7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
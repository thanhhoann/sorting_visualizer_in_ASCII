"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);

  const generateRandomBlocks = () => {
    for (let i = 1; i < 20; i++) {
      let block = {
        index: i,
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
    }, 1000);
    return () => clearInterval(timer);
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    borderColor: blockIndex == index ? "green" : "white",
    alignItems: "center"
  })));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiaSIsImJsb2NrIiwiaW5kZXgiLCJoZWlnaHQiLCJNYXRoIiwicmFuZG9tIiwiaXNTZWxlY3RlZCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwicHJldiIsImNsZWFySW50ZXJ2YWwiLCJtYXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5cbmNvbnN0IGl0ZW1zID0gW3sgbGFiZWw6IFwiYVwiIH0sIHsgbGFiZWw6IFwiYlwiIH0sIHsgbGFiZWw6IFwiY1wiIH1dO1xuY29uc3QgYmxvY2tzID0gW107XG5cbmNvbnN0IFRlc3QgPSAoKSA9PiB7XG5cdGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtjb3VudGVyLCBzZXRDb3VudGVyXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbYmxvY2tJbmRleCwgc2V0QmxvY2tJbmRleF0gPSB1c2VTdGF0ZSgwKTtcblxuXHRjb25zdCBnZW5lcmF0ZVJhbmRvbUJsb2NrcyA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IDIwOyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdGhlaWdodDogTWF0aC5yYW5kb20oKSAqIDEwLFxuXHRcdFx0XHRpc1NlbGVjdGVkOiBmYWxzZSxcblx0XHRcdH07XG5cdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0fVxuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Z2VuZXJhdGVSYW5kb21CbG9ja3MoKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEJsb2NrSW5kZXgoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCAxMDAwKTtcblxuXHRcdHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHRpbWVyKTtcblx0fSwgW10pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHR7YmxvY2tzLm1hcCgoYmxvY2ssIGluZGV4KSA9PiAoXG5cdFx0XHRcdDxCb3hcblx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdGJvcmRlclN0eWxlPVwicm91bmRcIlxuXHRcdFx0XHRcdGhlaWdodD17YmxvY2suaGVpZ2h0fVxuXHRcdFx0XHRcdHdpZHRoPVwiNVwiXG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I9e2Jsb2NrSW5kZXggPT0gaW5kZXggPyBcImdyZWVuXCIgOiBcIndoaXRlXCJ9XG5cdFx0XHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXG5cdFx0XHRcdD5cblx0XHRcdFx0PC9Cb3g+XG5cdFx0XHQpKX1cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUVBLE1BQU1RLEtBQUssR0FBRyxDQUFDO0VBQUVDLEtBQUssRUFBRTtBQUFULENBQUQsRUFBaUI7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakIsRUFBaUM7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakMsQ0FBZDtBQUNBLE1BQU1DLE1BQU0sR0FBRyxFQUFmOztBQUVBLE1BQU1DLElBQUksR0FBRyxNQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWixRQUFRLENBQUMsRUFBRCxDQUFsQztFQUNBLE1BQU0sQ0FBQ2EsT0FBRCxFQUFVQyxVQUFWLElBQXdCZCxRQUFRLENBQUMsQ0FBRCxDQUF0QztFQUNBLE1BQU0sQ0FBQ2UsVUFBRCxFQUFhQyxhQUFiLElBQThCaEIsUUFBUSxDQUFDLENBQUQsQ0FBNUM7O0VBRUEsTUFBTWlCLG9CQUFvQixHQUFHLE1BQU07SUFDbEMsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO01BQzVCLElBQUlDLEtBQUssR0FBRztRQUNYQyxLQUFLLEVBQUVGLENBREk7UUFFWEcsTUFBTSxFQUFFQyxJQUFJLENBQUNDLE1BQUwsS0FBZ0IsRUFGYjtRQUdYQyxVQUFVLEVBQUU7TUFIRCxDQUFaO01BS0FmLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWU4sS0FBWjtJQUNBO0VBQ0QsQ0FURDs7RUFXQWxCLFNBQVMsQ0FBQyxNQUFNO0lBQ2ZnQixvQkFBb0I7SUFDcEIsTUFBTVMsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtNQUMvQlgsYUFBYSxDQUFFWSxJQUFELElBQVVBLElBQUksR0FBRyxDQUFsQixDQUFiO0lBQ0EsQ0FGd0IsRUFFdEIsSUFGc0IsQ0FBekI7SUFJQSxPQUFPLE1BQU1DLGFBQWEsQ0FBQ0gsS0FBRCxDQUExQjtFQUNBLENBUFEsRUFPTixFQVBNLENBQVQ7RUFTQSxvQkFDQyxvQkFBQyxHQUFEO0lBQUssYUFBYSxFQUFDO0VBQW5CLEdBQ0VqQixNQUFNLENBQUNxQixHQUFQLENBQVcsQ0FBQ1gsS0FBRCxFQUFRQyxLQUFSLGtCQUNYLG9CQUFDLEdBQUQ7SUFDQyxHQUFHLEVBQUVBLEtBRE47SUFFQyxXQUFXLEVBQUMsT0FGYjtJQUdDLE1BQU0sRUFBRUQsS0FBSyxDQUFDRSxNQUhmO0lBSUMsS0FBSyxFQUFDLEdBSlA7SUFLQyxXQUFXLEVBQUVOLFVBQVUsSUFBSUssS0FBZCxHQUFzQixPQUF0QixHQUFnQyxPQUw5QztJQU1DLFVBQVUsRUFBQztFQU5aLEVBREEsQ0FERixDQUREO0FBZUEsQ0F4Q0Q7O0FBMENBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ0QixJQUFqQiJ9
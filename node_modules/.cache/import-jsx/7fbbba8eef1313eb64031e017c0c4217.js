"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 15; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 100);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[i].height > blocks[j].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      if (i == blocks.length - 1) setJ(i);else setJ(i + 1);
      setI(prev => prev + 1);
    }

    if (i == blocks.length - 1) {
      exit();
    }
  }, [j]);
  let text = `${i} ${j}`;
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, text), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: i == index || j == index ? "green" : "white"
  }))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiaSIsInNldEkiLCJqIiwic2V0SiIsImV4aXQiLCJpbnB1dCIsImtleSIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwidGVtcCIsImxlbmd0aCIsInRleHQiLCJtYXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZShcImluay1iaWctdGV4dFwiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2ksIHNldEldID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtqLCBzZXRKXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCB7IGV4aXQgfSA9IHVzZUFwcCgpO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0aWYgKGlucHV0ID09PSBcInFcIikge1xuXHRcdFx0ZXhpdCgpO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgZ2VuZXJhdGVSYW5kb21CbG9ja3MgPSAoKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxNTsgaSsrKSB7XG5cdFx0XHRsZXQgYmxvY2sgPSB7XG5cdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRoZWlnaHQ6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwKSxcblx0XHRcdFx0aXNTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHR9O1xuXHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdH1cblx0fTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGdlbmVyYXRlUmFuZG9tQmxvY2tzKCk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRKKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fSwgMTAwKTtcblxuXHRcdHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHRpbWVyKTtcblx0fSwgW10pO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0aWYgKGJsb2Nrc1tpXS5oZWlnaHQgPiBibG9ja3Nbal0uaGVpZ2h0KSB7XG5cdFx0XHRsZXQgdGVtcCA9IGJsb2Nrc1tpXTtcblx0XHRcdGJsb2Nrc1tpXSA9IGJsb2Nrc1tqXTtcblx0XHRcdGJsb2Nrc1tqXSA9IHRlbXA7XG5cdFx0fVxuXG5cdFx0aWYgKGogPT0gYmxvY2tzLmxlbmd0aCAtIDEpIHtcblx0XHRcdGlmIChpID09IGJsb2Nrcy5sZW5ndGggLSAxKSBzZXRKKGkpO1xuXHRcdFx0ZWxzZSBzZXRKKGkgKyAxKTtcblx0XHRcdHNldEkoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9XG5cblx0XHRpZiAoaSA9PSBibG9ja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0ZXhpdCgpO1xuXHRcdH1cblx0fSwgW2pdKTtcblxuXHRsZXQgdGV4dCA9IGAke2l9ICR7an1gO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuXHRcdFx0PFRleHQ+e3RleHR9PC9UZXh0PlxuXG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIj5cblx0XHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHRcdDxCb3hcblx0XHRcdFx0XHRcdG1hcmdpbj1cIjFcIlxuXHRcdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRcdGJvcmRlclN0eWxlPVwicm91bmRcIlxuXHRcdFx0XHRcdFx0aGVpZ2h0PXtibG9jay5oZWlnaHR9XG5cdFx0XHRcdFx0XHR3aWR0aD1cIjVcIlxuXHRcdFx0XHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXG5cdFx0XHRcdFx0XHRib3JkZXJDb2xvcj17aSA9PSBpbmRleCB8fCBqID09IGluZGV4ID8gXCJncmVlblwiIDogXCJ3aGl0ZVwifVxuXHRcdFx0XHRcdD48L0JveD5cblx0XHRcdFx0KSl9XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUNBLE1BQU1RLE9BQU8sR0FBR1IsT0FBTyxDQUFDLGNBQUQsQ0FBdkI7O0FBRUEsTUFBTVMsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFL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
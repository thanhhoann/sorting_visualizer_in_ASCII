"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);

  const generateRandomBlocks = () => {
    for (let i = 1; i < 20; i++) {
      let block = {
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      blocks[blockIndex].isSelected(true);
      setBlockIndex(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    borderColor: isSelected ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, Math.round(block.height)))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiaSIsImJsb2NrIiwiaGVpZ2h0IiwiTWF0aCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwibWFwIiwiaW5kZXgiLCJyb3VuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtibG9ja0luZGV4LCBzZXRCbG9ja0luZGV4XSA9IHVzZVN0YXRlKDApO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgMjA7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRoZWlnaHQ6IE1hdGgucmFuZG9tKCkgKiAxMCxcblx0XHRcdFx0aXNTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHR9O1xuXHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdH1cblx0fTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGdlbmVyYXRlUmFuZG9tQmxvY2tzKCk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRibG9ja3NbYmxvY2tJbmRleF0uaXNTZWxlY3RlZCh0cnVlKTtcblx0XHRcdHNldEJsb2NrSW5kZXgoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCA1MDApO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIj5cblx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0PEJveFxuXHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0Ym9yZGVyU3R5bGU9XCJyb3VuZFwiXG5cdFx0XHRcdFx0aGVpZ2h0PXtibG9jay5oZWlnaHR9XG5cdFx0XHRcdFx0d2lkdGg9XCI1XCJcblx0XHRcdFx0XHRib3JkZXJDb2xvcj17aXNTZWxlY3RlZCA/IFwiZ3JlZW5cIiA6IFwid2hpdGVcIn1cblx0XHRcdFx0PlxuXHRcdFx0XHRcdDxUZXh0PntNYXRoLnJvdW5kKGJsb2NrLmhlaWdodCl9PC9UZXh0PlxuXHRcdFx0XHQ8L0JveD5cblx0XHRcdCkpfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBRUEsTUFBTVEsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQyxDQUFkO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBRUEsTUFBTUMsSUFBSSxHQUFHLE1BQU07RUFDbEIsTUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JaLFFBQVEsQ0FBQyxFQUFELENBQWxDO0VBQ0EsTUFBTSxDQUFDYSxPQUFELEVBQVVDLFVBQVYsSUFBd0JkLFFBQVEsQ0FBQyxDQUFELENBQXRDO0VBQ0EsTUFBTSxDQUFDZSxVQUFELEVBQWFDLGFBQWIsSUFBOEJoQixRQUFRLENBQUMsQ0FBRCxDQUE1Qzs7RUFFQSxNQUFNaUIsb0JBQW9CLEdBQUcsTUFBTTtJQUNsQyxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7TUFDNUIsSUFBSUMsS0FBSyxHQUFHO1FBQ1hDLE1BQU0sRUFBRUMsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLEVBRGI7UUFFWEMsVUFBVSxFQUFFO01BRkQsQ0FBWjtNQUlBZCxNQUFNLENBQUNlLElBQVAsQ0FBWUwsS0FBWjtJQUNBO0VBQ0QsQ0FSRDs7RUFVQWxCLFNBQVMsQ0FBQyxNQUFNO0lBQ2ZnQixvQkFBb0I7SUFDcEIsTUFBTVEsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtNQUMvQmpCLE1BQU0sQ0FBQ00sVUFBRCxDQUFOLENBQW1CUSxVQUFuQixDQUE4QixJQUE5QjtNQUNBUCxhQUFhLENBQUVXLElBQUQsSUFBVUEsSUFBSSxHQUFHLENBQWxCLENBQWI7SUFDQSxDQUh3QixFQUd0QixHQUhzQixDQUF6QjtJQUtBLE9BQU8sTUFBTUMsYUFBYSxDQUFDSCxLQUFELENBQTFCO0VBQ0EsQ0FSUSxFQVFOLEVBUk0sQ0FBVDtFQVVBLG9CQUNDLG9CQUFDLEdBQUQ7SUFBSyxhQUFhLEVBQUM7RUFBbkIsR0FDRWhCLE1BQU0sQ0FBQ29CLEdBQVAsQ0FBVyxDQUFDVixLQUFELEVBQVFXLEtBQVIsa0JBQ1gsb0JBQUMsR0FBRDtJQUNDLEdBQUcsRUFBRUEsS0FETjtJQUVDLFdBQVcsRUFBQyxPQUZiO0lBR0MsTUFBTSxFQUFFWCxLQUFLLENBQUNDLE1BSGY7SUFJQyxLQUFLLEVBQUMsR0FKUDtJQUtDLFdBQVcsRUFBRUcsVUFBVSxHQUFHLE9BQUgsR0FBYTtFQUxyQyxnQkFPQyxvQkFBQyxJQUFELFFBQU9GLElBQUksQ0FBQ1UsS0FBTCxDQUFXWixLQUFLLENBQUNDLE1BQWpCLENBQVAsQ0FQRCxDQURBLENBREYsQ0FERDtBQWVBLENBeENEOztBQTBDQVksTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkIsSUFBakIifQ==
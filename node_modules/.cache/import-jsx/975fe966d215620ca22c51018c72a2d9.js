"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);
  const [test, setTest] = useState(0);
  const [current, setCurrent] = useState(0);
  const [prev, setPrev] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 20; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    setCurrent(blocks[blockIndex].height);
    setPrev(blocks[blockIndex + 1].height);
  }, [blockIndex]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(BigText, null, current, " ", current > prev ? ">" : "<", " ", prev), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: blockIndex == index || blockIndex + 1 == index ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, block.height)))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiY29sb3IiLCJzZXRDb2xvciIsImNvdW50ZXIiLCJzZXRDb3VudGVyIiwiYmxvY2tJbmRleCIsInNldEJsb2NrSW5kZXgiLCJ0ZXN0Iiwic2V0VGVzdCIsImN1cnJlbnQiLCJzZXRDdXJyZW50IiwicHJldiIsInNldFByZXYiLCJpbnB1dCIsImtleSIsImV4aXQiLCJnZW5lcmF0ZVJhbmRvbUJsb2NrcyIsImkiLCJibG9jayIsImluZGV4IiwiaGVpZ2h0IiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIiwiaXNTZWxlY3RlZCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBUZXN0ID0gKCkgPT4ge1xuXHRjb25zdCBbY29sb3IsIHNldENvbG9yXSA9IHVzZVN0YXRlKFwiXCIpO1xuXHRjb25zdCBbY291bnRlciwgc2V0Q291bnRlcl0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2Jsb2NrSW5kZXgsIHNldEJsb2NrSW5kZXhdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFt0ZXN0LCBzZXRUZXN0XSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbY3VycmVudCwgc2V0Q3VycmVudF0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW3ByZXYsIHNldFByZXZdID0gdXNlU3RhdGUoMCk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRpZiAoaW5wdXQgPT09IFwicVwiKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCBnZW5lcmF0ZVJhbmRvbUJsb2NrcyA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDIwOyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdGhlaWdodDogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTApLFxuXHRcdFx0XHRpc1NlbGVjdGVkOiBmYWxzZSxcblx0XHRcdH07XG5cdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0fVxuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Z2VuZXJhdGVSYW5kb21CbG9ja3MoKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEJsb2NrSW5kZXgoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCA1MDApO1xuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRzZXRDdXJyZW50KGJsb2Nrc1tibG9ja0luZGV4XS5oZWlnaHQpO1xuXHRcdHNldFByZXYoYmxvY2tzW2Jsb2NrSW5kZXggKyAxXS5oZWlnaHQpO1xuXHR9LCBbYmxvY2tJbmRleF0pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuXHRcdFx0PEJpZ1RleHQ+XG5cdFx0XHRcdHtjdXJyZW50fSB7Y3VycmVudCA+IHByZXYgPyBcIj5cIiA6IFwiPFwifSB7cHJldn1cblx0XHRcdDwvQmlnVGV4dD5cblxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdFx0Ym9yZGVyU3R5bGU9XCJyb3VuZFwiXG5cdFx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHRcdHdpZHRoPVwiNVwiXG5cdFx0XHRcdFx0XHRhbGlnbkl0ZW1zPVwiY2VudGVyXCJcblx0XHRcdFx0XHRcdGJvcmRlckNvbG9yPXtcblx0XHRcdFx0XHRcdFx0YmxvY2tJbmRleCA9PSBpbmRleCB8fCBibG9ja0luZGV4ICsgMSA9PSBpbmRleCA/IFwiZ3JlZW5cIiA6IFwid2hpdGVcIlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdDxUZXh0PntibG9jay5oZWlnaHR9PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpKX1cblx0XHRcdDwvQm94PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBQ0EsTUFBTVEsT0FB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
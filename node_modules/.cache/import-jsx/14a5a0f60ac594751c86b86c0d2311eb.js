"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 1; i < 20; i++) {
      let block = {
        index: i,
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React.createElement(Text, null, blockIndex), blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: blocks[index].height,
    width: "5",
    borderColor: blockIndex == index || blockIndex - 1 == index ? "green" : "white",
    alignItems: "center"
  })));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsImlucHV0Iiwia2V5IiwiZXhpdCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiaSIsImJsb2NrIiwiaW5kZXgiLCJoZWlnaHQiLCJNYXRoIiwicmFuZG9tIiwiaXNTZWxlY3RlZCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwicHJldiIsImNsZWFySW50ZXJ2YWwiLCJtYXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5cbmNvbnN0IGl0ZW1zID0gW3sgbGFiZWw6IFwiYVwiIH0sIHsgbGFiZWw6IFwiYlwiIH0sIHsgbGFiZWw6IFwiY1wiIH1dO1xuY29uc3QgYmxvY2tzID0gW107XG5cbmNvbnN0IFRlc3QgPSAoKSA9PiB7XG5cdGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtjb3VudGVyLCBzZXRDb3VudGVyXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbYmxvY2tJbmRleCwgc2V0QmxvY2tJbmRleF0gPSB1c2VTdGF0ZSgwKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgMjA7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJhbmRvbSgpICogMTAsXG5cdFx0XHRcdGlzU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0fTtcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0c2V0QmxvY2tJbmRleCgocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH0sIDUwMCk7XG5cblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiPlxuXHRcdFx0PFRleHQ+e2Jsb2NrSW5kZXh9PC9UZXh0PlxuXHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2Nrc1tpbmRleF0uaGVpZ2h0fVxuXHRcdFx0XHRcdHdpZHRoPVwiNVwiXG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I9e1xuXHRcdFx0XHRcdFx0YmxvY2tJbmRleCA9PSBpbmRleCB8fCBibG9ja0luZGV4IC0gMSA9PSBpbmRleCA/IFwiZ3JlZW5cIiA6IFwid2hpdGVcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhbGlnbkl0ZW1zPVwiY2VudGVyXCJcblx0XHRcdFx0PjwvQm94PlxuXHRcdFx0KSl9XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3Q7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFFQyxRQUFGO0VBQVlDO0FBQVosSUFBMEJGLE9BQU8sQ0FBQyxPQUFELENBQXZDOztBQUNBLE1BQU07RUFBRUcsUUFBRjtFQUFZQyxNQUFaO0VBQW9CQyxRQUFwQjtFQUE4QkMsSUFBOUI7RUFBb0NDO0FBQXBDLElBQTRDUCxPQUFPLENBQUMsS0FBRCxDQUF6RDs7QUFFQSxNQUFNUSxLQUFLLEdBQUcsQ0FBQztFQUFFQyxLQUFLLEVBQUU7QUFBVCxDQUFELEVBQWlCO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpCLEVBQWlDO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpDLENBQWQ7QUFDQSxNQUFNQyxNQUFNLEdBQUcsRUFBZjs7QUFFQSxNQUFNQyxJQUFJLEdBQUcsTUFBTTtFQUNsQixNQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlosUUFBUSxDQUFDLEVBQUQsQ0FBbEM7RUFDQSxNQUFNLENBQUNhLE9BQUQsRUFBVUMsVUFBVixJQUF3QmQsUUFBUSxDQUFDLENBQUQsQ0FBdEM7RUFDQSxNQUFNLENBQUNlLFVBQUQsRUFBYUMsYUFBYixJQUE4QmhCLFFBQVEsQ0FBQyxDQUFELENBQTVDO0VBRUFFLFFBQVEsQ0FBQyxDQUFDZSxLQUFELEVBQVFDLEdBQVIsS0FBZ0I7SUFDeEIsSUFBSUQsS0FBSyxLQUFLLEdBQWQsRUFBbUI7TUFDbEJFLElBQUk7SUFDSjtFQUNELENBSk8sQ0FBUjs7RUFNQSxNQUFNQyxvQkFBb0IsR0FBRyxNQUFNO0lBQ2xDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtNQUM1QixJQUFJQyxLQUFLLEdBQUc7UUFDWEMsS0FBSyxFQUFFRixDQURJO1FBRVhHLE1BQU0sRUFBRUMsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLEVBRmI7UUFHWEMsVUFBVSxFQUFFO01BSEQsQ0FBWjtNQUtBbEIsTUFBTSxDQUFDbUIsSUFBUCxDQUFZTixLQUFaO0lBQ0E7RUFDRCxDQVREOztFQVdBckIsU0FBUyxDQUFDLE1BQU07SUFDZm1CLG9CQUFvQjtJQUNwQixNQUFNUyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO01BQy9CZCxhQUFhLENBQUVlLElBQUQsSUFBVUEsSUFBSSxHQUFHLENBQWxCLENBQWI7SUFDQSxDQUZ3QixFQUV0QixHQUZzQixDQUF6QjtJQUlBLE9BQU8sTUFBTUMsYUFBYSxDQUFDSCxLQUFELENBQTFCO0VBQ0EsQ0FQUSxFQU9OLEVBUE0sQ0FBVDtFQVNBLG9CQUNDLG9CQUFDLEdBQUQ7SUFBSyxhQUFhLEVBQUM7RUFBbkIsZ0JBQ0Msb0JBQUMsSUFBRCxRQUFPZCxVQUFQLENBREQsRUFFRU4sTUFBTSxDQUFDd0IsR0FBUCxDQUFXLENBQUNYLEtBQUQsRUFBUUMsS0FBUixrQkFDWCxvQkFBQyxHQUFEO0lBQ0MsR0FBRyxFQUFFQSxLQUROO0lBRUMsV0FBVyxFQUFDLE9BRmI7SUFHQyxNQUFNLEVBQUVkLE1BQU0sQ0FBQ2MsS0FBRCxDQUFOLENBQWNDLE1BSHZCO0lBSUMsS0FBSyxFQUFDLEdBSlA7SUFLQyxXQUFXLEVBQ1ZULFVBQVUsSUFBSVEsS0FBZCxJQUF1QlIsVUFBVSxHQUFHLENBQWIsSUFBa0JRLEtBQXpDLEdBQWlELE9BQWpELEdBQTJELE9BTjdEO0lBUUMsVUFBVSxFQUFDO0VBUlosRUFEQSxDQUZGLENBREQ7QUFpQkEsQ0FoREQ7O0FBa0RBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ6QixJQUFqQiJ9
"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);
  const [test, setTest] = useState(0);
  const [current, setCurrent] = useState(0);
  const [prev, setPrev] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 20; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    setCurrent(blocks[blockIndex].height);
    setPrev(blocks[blockIndex + 1].height);
  }, [blockIndex]);
  let text = `${current} ${current > prev ? ">" : "<"} ${prev}`;
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(BigText, {
    text: text
  }), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: blockIndex == index || blockIndex + 1 == index ? "green" : "white"
  }, /*#__PURE__*/React.createElement(Text, null, block.height)))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiY29sb3IiLCJzZXRDb2xvciIsImNvdW50ZXIiLCJzZXRDb3VudGVyIiwiYmxvY2tJbmRleCIsInNldEJsb2NrSW5kZXgiLCJ0ZXN0Iiwic2V0VGVzdCIsImN1cnJlbnQiLCJzZXRDdXJyZW50IiwicHJldiIsInNldFByZXYiLCJpbnB1dCIsImtleSIsImV4aXQiLCJnZW5lcmF0ZVJhbmRvbUJsb2NrcyIsImkiLCJibG9jayIsImluZGV4IiwiaGVpZ2h0IiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIiwiaXNTZWxlY3RlZCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInRleHQiLCJtYXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZShcImluay1iaWctdGV4dFwiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtibG9ja0luZGV4LCBzZXRCbG9ja0luZGV4XSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbdGVzdCwgc2V0VGVzdF0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2N1cnJlbnQsIHNldEN1cnJlbnRdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtwcmV2LCBzZXRQcmV2XSA9IHVzZVN0YXRlKDApO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0aWYgKGlucHV0ID09PSBcInFcIikge1xuXHRcdFx0ZXhpdCgpO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgZ2VuZXJhdGVSYW5kb21CbG9ja3MgPSAoKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XG5cdFx0XHRsZXQgYmxvY2sgPSB7XG5cdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRoZWlnaHQ6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwKSxcblx0XHRcdFx0aXNTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHR9O1xuXHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdH1cblx0fTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGdlbmVyYXRlUmFuZG9tQmxvY2tzKCk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRCbG9ja0luZGV4KChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fSwgNTAwKTtcblxuXHRcdHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHRpbWVyKTtcblx0fSwgW10pO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0c2V0Q3VycmVudChibG9ja3NbYmxvY2tJbmRleF0uaGVpZ2h0KTtcblx0XHRzZXRQcmV2KGJsb2Nrc1tibG9ja0luZGV4ICsgMV0uaGVpZ2h0KTtcblx0fSwgW2Jsb2NrSW5kZXhdKTtcblx0bGV0IHRleHQgPSBgJHtjdXJyZW50fSAke2N1cnJlbnQgPiBwcmV2ID8gXCI+XCIgOiBcIjxcIn0gJHtwcmV2fWA7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG5cdFx0XHQ8QmlnVGV4dCB0ZXh0PXt0ZXh0fSAvPlxuXG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIj5cblx0XHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHRcdDxCb3hcblx0XHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRcdGhlaWdodD17YmxvY2suaGVpZ2h0fVxuXHRcdFx0XHRcdFx0d2lkdGg9XCI1XCJcblx0XHRcdFx0XHRcdGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuXHRcdFx0XHRcdFx0Ym9yZGVyQ29sb3I9e1xuXHRcdFx0XHRcdFx0XHRibG9ja0luZGV4ID09IGluZGV4IHx8IGJsb2NrSW5kZXggKyAxID09IGluZGV4ID8gXCJncmVlblwiIDogXCJ3aGl0ZVwiXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0PFRleHQ+e2Jsb2NrLmhlaWdodH08L1RleHQ+XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdCkpfVxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3Q7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFFQyxRQUFGO0VBQVlDO0FBQVosSUFBMEJGLE9BQU8sQ0FBQyxPQUFELENBQXZDOztBQUNBLE1BQU07RUFBRUcsUUFBRjtFQUFZQyxNQUFaO0VBQW9CQyxRQUFwQjtFQUE4QkMsSUFBOUI7RUFBb0NDO0FBQXBDLElBQTRDUCxPQUFPLENBQUMsS0FBRCxDQUF6RDs7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
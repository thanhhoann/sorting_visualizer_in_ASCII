"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  const [isRunning, setIsRunning] = useState(false);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 15; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    setIsRunning(true);
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 100);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[i].height > blocks[j].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      setJ(i);
      setI(prev => prev + 1);
    }

    if (i == blocks.length - 1) {
      setIsRunning(false);
      exit();
    }
  }, [j]);
  let text = `${i} ${j}`;
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, text), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: i == index || j == index ? "green" : "white"
  }))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiaSIsInNldEkiLCJqIiwic2V0SiIsImV4aXQiLCJpc1J1bm5pbmciLCJzZXRJc1J1bm5pbmciLCJpbnB1dCIsImtleSIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwidGVtcCIsImxlbmd0aCIsInRleHQiLCJtYXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZUlucHV0LCB1c2VBcHAsIHVzZUZvY3VzLCBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZShcImluay1iaWctdGV4dFwiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2ksIHNldEldID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtqLCBzZXRKXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCB7IGV4aXQgfSA9IHVzZUFwcCgpO1xuXHRjb25zdCBbaXNSdW5uaW5nLCBzZXRJc1J1bm5pbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0aWYgKGlucHV0ID09PSBcInFcIikge1xuXHRcdFx0ZXhpdCgpO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgZ2VuZXJhdGVSYW5kb21CbG9ja3MgPSAoKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxNTsgaSsrKSB7XG5cdFx0XHRsZXQgYmxvY2sgPSB7XG5cdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRoZWlnaHQ6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwKSxcblx0XHRcdFx0aXNTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHR9O1xuXHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdH1cblx0fTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGdlbmVyYXRlUmFuZG9tQmxvY2tzKCk7XG4gICAgICAgICAgc2V0SXNSdW5uaW5nKHRydWUpXG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRKKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fSwgMTAwKTtcblxuXHRcdHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHRpbWVyKTtcblx0fSwgW10pO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0aWYgKGJsb2Nrc1tpXS5oZWlnaHQgPiBibG9ja3Nbal0uaGVpZ2h0KSB7XG5cdFx0XHRsZXQgdGVtcCA9IGJsb2Nrc1tpXTtcblx0XHRcdGJsb2Nrc1tpXSA9IGJsb2Nrc1tqXTtcblx0XHRcdGJsb2Nrc1tqXSA9IHRlbXA7XG5cdFx0fVxuXG5cdFx0aWYgKGogPT0gYmxvY2tzLmxlbmd0aCAtIDEpIHtcblx0XHRcdHNldEooaSk7XG5cdFx0XHRzZXRJKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fVxuXG5cdFx0aWYgKGkgPT0gYmxvY2tzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgIHNldElzUnVubmluZyhmYWxzZSlcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0sIFtqXSk7XG5cblx0bGV0IHRleHQgPSBgJHtpfSAke2p9YDtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cblx0XHRcdDxUZXh0Pnt0ZXh0fTwvVGV4dD5cblxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCI+XG5cdFx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0XHRtYXJnaW49XCIxXCJcblx0XHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRcdGhlaWdodD17YmxvY2suaGVpZ2h0fVxuXHRcdFx0XHRcdFx0d2lkdGg9XCI1XCJcblx0XHRcdFx0XHRcdGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuXHRcdFx0XHRcdFx0Ym9yZGVyQ29sb3I9e2kgPT0gaW5kZXggfHwgaiA9PSBpbmRleCA/IFwiZ3JlZW5cIiA6IFwid2hpdGVcIn1cblx0XHRcdFx0XHQ+PC9Cb3g+XG5cdFx0XHRcdCkpfVxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3Q7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFFQyxRQUFGO0VBQVlDO0FBQVosSUFBMEJGLE9BQU8sQ0FBQyxPQUFELENBQXZDOztBQUNBLE1BQU07RUFBRUcsUUFBRjtFQUFZQyxNQUFaO0VBQW9CQyxRQUFwQjtFQUE4QkMsSUFBOUI7RUFBb0NDO0FBQXBDLElBQTRDUCxPQUFPLENBQUMsS0FBRCxDQUF6RDs7QUFDQSxNQUFNUSxPQUFPLEdBQUdSLE9BQU8sQ0FBQyxjQUFELENBQXZCOztBQUVBLE1BQU1TLEtBQUssR0FBRyxDQUFDO0VBQUVDLEtBQUssRUFBRTtBQUFULENBQUQsRUFBaUI7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakIsRUFBaUM7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakMsQ0FBZDtBQUNBLE1BQU1DLE1BQU0sR0FBRyxFQUFmOztBQUVBLE1BQU1DLElBQUksR0FBRyxNQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsQ0FBRCxFQUFJQyxJQUFKLElBQVliLFFBQVEsQ0FBQyxDQUFELENBQTFCO0VBQ0EsTUFBTSxDQUFDYyxDQUFELEVBQUlDLElBQUosSUFBWWYsUUFBUSxDQUFDLENBQUQsQ0FBMUI7RUFDQSxNQUFNO0lBQUVnQjtFQUFGLElBQVdiLE1BQU0sRUFBdkI7RUFDQSxNQUFNLENBQUNjLFNBQUQsRUFBWUMsWUFBWixJQUE0QmxCLFFBQVEsQ0FBQyxLQUFELENBQTFDO0VBRUFFLFFBQVEsQ0FBQyxDQUFDaUIsS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0lBQ3hCLElBQUlELEtBQUssS0FBSyxHQUFkLEVBQW1CO01BQ2xCSCxJQUFJO0lBQ0o7RUFDRCxDQUpPLENBQVI7O0VBTUEsTUFBTUssb0JBQW9CLEdBQUcsTUFBTTtJQUNsQyxLQUFLLElBQUlULENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7TUFDNUIsSUFBSVUsS0FBSyxHQUFHO1FBQ1hDLEtBQUssRUFBRVgsQ0FESTtRQUVYWSxNQUFNLEVBQUVDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0IsRUFBM0IsQ0FGRztRQUdYQyxVQUFVLEVBQUU7TUFIRCxDQUFaO01BS0FsQixNQUFNLENBQUNtQixJQUFQLENBQVlQLEtBQVo7SUFDQTtFQUNELENBVEQ7O0VBV0FyQixTQUFTLENBQUMsTUFBTTtJQUNmb0Isb0JBQW9CO0lBQ1pILFlBQVksQ0FBQyxJQUFELENBQVo7SUFDUixNQUFNWSxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO01BQy9CaEIsSUFBSSxDQUFFaUIsSUFBRCxJQUFVQSxJQUFJLEdBQUcsQ0FBbEIsQ0FBSjtJQUNBLENBRndCLEVBRXRCLEdBRnNCLENBQXpCO0lBSUEsT0FBTyxNQUFNQyxhQUFhLENBQUNILEtBQUQsQ0FBMUI7RUFDQSxDQVJRLEVBUU4sRUFSTSxDQUFUO0VBVUE3QixTQUFTLENBQUMsTUFBTTtJQUNmLElBQUlTLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFOLENBQVVZLE1BQVYsR0FBbUJkLE1BQU0sQ0FBQ0ksQ0FBRCxDQUFOLENBQVVVLE1BQWpDLEVBQXlDO01BQ3hDLElBQUlVLElBQUksR0FBR3hCLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFqQjtNQUNBRixNQUFNLENBQUNFLENBQUQsQ0FBTixHQUFZRixNQUFNLENBQUNJLENBQUQsQ0FBbEI7TUFDQUosTUFBTSxDQUFDSSxDQUFELENBQU4sR0FBWW9CLElBQVo7SUFDQTs7SUFFRCxJQUFJcEIsQ0FBQyxJQUFJSixNQUFNLENBQUN5QixNQUFQLEdBQWdCLENBQXpCLEVBQTRCO01BQzNCcEIsSUFBSSxDQUFDSCxDQUFELENBQUo7TUFDQUMsSUFBSSxDQUFFbUIsSUFBRCxJQUFVQSxJQUFJLEdBQUcsQ0FBbEIsQ0FBSjtJQUNBOztJQUVELElBQUlwQixDQUFDLElBQUlGLE1BQU0sQ0FBQ3lCLE1BQVAsR0FBZ0IsQ0FBekIsRUFBNEI7TUFDZmpCLFlBQVksQ0FBQyxLQUFELENBQVo7TUFDWkYsSUFBSTtJQUNKO0VBQ0QsQ0FoQlEsRUFnQk4sQ0FBQ0YsQ0FBRCxDQWhCTSxDQUFUO0VBa0JBLElBQUlzQixJQUFJLEdBQUksR0FBRXhCLENBQUUsSUFBR0UsQ0FBRSxFQUFyQjtFQUVBLG9CQUNDLG9CQUFDLEdBQUQ7SUFBSyxhQUFhLEVBQUMsUUFBbkI7SUFBNEIsVUFBVSxFQUFDO0VBQXZDLGdCQUNDLG9CQUFDLElBQUQsUUFBT3NCLElBQVAsQ0FERCxlQUdDLG9CQUFDLEdBQUQ7SUFBSyxhQUFhLEVBQUM7RUFBbkIsR0FDRTFCLE1BQU0sQ0FBQzJCLEdBQVAsQ0FBVyxDQUFDZixLQUFELEVBQVFDLEtBQVIsa0JBQ1gsb0JBQUMsR0FBRDtJQUNDLE1BQU0sRUFBQyxHQURSO0lBRUMsR0FBRyxFQUFFQSxLQUZOO0lBR0MsV0FBVyxFQUFDLE9BSGI7SUFJQyxNQUFNLEVBQUVELEtBQUssQ0FBQ0UsTUFKZjtJQUtDLEtBQUssRUFBQyxHQUxQO0lBTUMsVUFBVSxFQUFDLFFBTlo7SUFPQyxXQUFXLEVBQUVaLENBQUMsSUFBSVcsS0FBTCxJQUFjVCxDQUFDLElBQUlTLEtBQW5CLEdBQTJCLE9BQTNCLEdBQXFDO0VBUG5ELEVBREEsQ0FERixDQUhELENBREQ7QUFtQkEsQ0F4RUQ7O0FBMEVBZSxNQUFNLENBQUNDLE9BQVAsR0FBaUI1QixJQUFqQiJ9
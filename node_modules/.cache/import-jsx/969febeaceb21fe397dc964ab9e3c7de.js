"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  const [isRunning, setIsRunning] = useState(false);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 40; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    setIsRunning(true);
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 50);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[j].height > blocks[i].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      if (j == i + 1) setJ(i);else setJ(i + 1);
      setI(prev => prev + 1);
    }

    if (i == blocks.length - 1) {
      setI(0);
      setJ(0);
      setIsRunning(false);
    }
  }, [j]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    height: block.height,
    borderStyle: "bold",
    width: "1",
    alignItems: "center",
    borderColor: (i == index || j == index) && isRunning == true ? "green" : "white"
  }))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiaSIsInNldEkiLCJqIiwic2V0SiIsImV4aXQiLCJpc1J1bm5pbmciLCJzZXRJc1J1bm5pbmciLCJpbnB1dCIsImtleSIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJjbGVhckludGVydmFsIiwidGVtcCIsImxlbmd0aCIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBUZXN0ID0gKCkgPT4ge1xuXHRjb25zdCBbaSwgc2V0SV0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2osIHNldEpdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IHsgZXhpdCB9ID0gdXNlQXBwKCk7XG5cblx0Y29uc3QgW2lzUnVubmluZywgc2V0SXNSdW5uaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgNDA7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGlzU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0fTtcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdHNldElzUnVubmluZyh0cnVlKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEooKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCA1MCk7XG5cblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmIChibG9ja3Nbal0uaGVpZ2h0ID4gYmxvY2tzW2ldLmhlaWdodCkge1xuXHRcdFx0bGV0IHRlbXAgPSBibG9ja3NbaV07XG5cdFx0XHRibG9ja3NbaV0gPSBibG9ja3Nbal07XG5cdFx0XHRibG9ja3Nbal0gPSB0ZW1wO1xuXHRcdH1cblxuXHRcdGlmIChqID09IGJsb2Nrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRpZiAoaiA9PSBpICsgMSkgc2V0SihpKTtcblx0XHRcdGVsc2Ugc2V0SihpICsgMSk7XG5cdFx0XHRzZXRJKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fVxuXG5cdFx0aWYgKGkgPT0gYmxvY2tzLmxlbmd0aCAtIDEpIHtcblx0XHRcdHNldEkoMCk7XG5cdFx0XHRzZXRKKDApO1xuXHRcdFx0c2V0SXNSdW5uaW5nKGZhbHNlKTtcblx0XHR9XG5cdH0sIFtqXSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIj5cblx0XHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHRcdDxCb3hcblx0XHRcdFx0XHRcdG1hcmdpbj1cIjFcIlxuXHRcdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRcdGhlaWdodD17YmxvY2suaGVpZ2h0fVxuXHRcdFx0XHRcdFx0Ym9yZGVyU3R5bGU9XCJib2xkXCJcblx0XHRcdFx0XHRcdHdpZHRoPVwiMVwiXG5cdFx0XHRcdFx0XHRhbGlnbkl0ZW1zPVwiY2VudGVyXCJcblx0XHRcdFx0XHRcdGJvcmRlckNvbG9yPXtcblx0XHRcdFx0XHRcdFx0KGkgPT0gaW5kZXggfHwgaiA9PSBpbmRleCkgJiYgaXNSdW5uaW5nID09IHRydWVcblx0XHRcdFx0XHRcdFx0XHQ/IFwiZ3JlZW5cIlxuXHRcdFx0XHRcdFx0XHRcdDogXCJ3aGl0ZVwiXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpKX1cblx0XHRcdDwvQm94PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBQ0EsTUFBTVEsT0FBTyxHQUFHUixPQUFPLENBQUMsY0FBRCxDQUF2Qjs7QUFFQSxNQUFNUyxLQUFLLEdBQUcsQ0FBQztFQUFFQyxLQUFLLEVBQUU7QUFBVCxDQUFELEVBQWlCO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpCLEVBQWlDO0VBQUVBLEtBQUssRUFBRTtBQUFULENBQWpDLENBQWQ7QUFDQSxNQUFNQyxNQUFNLEdBQUcsRUFBZjs7QUFFQSxNQUFNQyxJQUFJLEdBQUcsTUFBTTtFQUNsQixNQUFNLENBQUNDLENBQUQsRUFBSUMsSUFBSixJQUFZYixRQUFRLENBQUMsQ0FBRCxDQUExQjtFQUNBLE1BQU0sQ0FBQ2MsQ0FBRCxFQUFJQyxJQUFKLElBQVlmLFFBQVEsQ0FBQyxDQUFELENBQTFCO0VBQ0EsTUFBTTtJQUFFZ0I7RUFBRixJQUFXYixNQUFNLEVBQXZCO0VBRUEsTUFBTSxDQUFDYyxTQUFELEVBQVlDLFlBQVosSUFBNEJsQixRQUFRLENBQUMsS0FBRCxDQUExQztFQUVBRSxRQUFRLENBQUMsQ0FBQ2lCLEtBQUQsRUFBUUMsR0FBUixLQUFnQjtJQUN4QixJQUFJRCxLQUFLLEtBQUssR0FBZCxFQUFtQjtNQUNsQkgsSUFBSTtJQUNKO0VBQ0QsQ0FKTyxDQUFSOztFQU1BLE1BQU1LLG9CQUFvQixHQUFHLE1BQU07SUFDbEMsS0FBSyxJQUFJVCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO01BQzVCLElBQUlVLEtBQUssR0FBRztRQUNYQyxLQUFLLEVBQUVYLENBREk7UUFFWFksTUFBTSxFQUFFQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCLEVBQTNCLENBRkc7UUFHWEMsVUFBVSxFQUFFO01BSEQsQ0FBWjtNQUtBbEIsTUFBTSxDQUFDbUIsSUFBUCxDQUFZUCxLQUFaO0lBQ0E7RUFDRCxDQVREOztFQVdBckIsU0FBUyxDQUFDLE1BQU07SUFDZm9CLG9CQUFvQjtJQUNwQkgsWUFBWSxDQUFDLElBQUQsQ0FBWjtJQUNBLE1BQU1ZLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07TUFDL0JoQixJQUFJLENBQUVpQixJQUFELElBQVVBLElBQUksR0FBRyxDQUFsQixDQUFKO0lBQ0EsQ0FGd0IsRUFFdEIsRUFGc0IsQ0FBekI7SUFJQSxPQUFPLE1BQU1DLGFBQWEsQ0FBQ0gsS0FBRCxDQUExQjtFQUNBLENBUlEsRUFRTixFQVJNLENBQVQ7RUFVQTdCLFNBQVMsQ0FBQyxNQUFNO0lBQ2YsSUFBSVMsTUFBTSxDQUFDSSxDQUFELENBQU4sQ0FBVVUsTUFBVixHQUFtQmQsTUFBTSxDQUFDRSxDQUFELENBQU4sQ0FBVVksTUFBakMsRUFBeUM7TUFDeEMsSUFBSVUsSUFBSSxHQUFHeEIsTUFBTSxDQUFDRSxDQUFELENBQWpCO01BQ0FGLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFOLEdBQVlGLE1BQU0sQ0FBQ0ksQ0FBRCxDQUFsQjtNQUNBSixNQUFNLENBQUNJLENBQUQsQ0FBTixHQUFZb0IsSUFBWjtJQUNBOztJQUVELElBQUlwQixDQUFDLElBQUlKLE1BQU0sQ0FBQ3lCLE1BQVAsR0FBZ0IsQ0FBekIsRUFBNEI7TUFDM0IsSUFBSXJCLENBQUMsSUFBSUYsQ0FBQyxHQUFHLENBQWIsRUFBZ0JHLElBQUksQ0FBQ0gsQ0FBRCxDQUFKLENBQWhCLEtBQ0tHLElBQUksQ0FBQ0gsQ0FBQyxHQUFHLENBQUwsQ0FBSjtNQUNMQyxJQUFJLENBQUVtQixJQUFELElBQVVBLElBQUksR0FBRyxDQUFsQixDQUFKO0lBQ0E7O0lBRUQsSUFBSXBCLENBQUMsSUFBSUYsTUFBTSxDQUFDeUIsTUFBUCxHQUFnQixDQUF6QixFQUE0QjtNQUMzQnRCLElBQUksQ0FBQyxDQUFELENBQUo7TUFDQUUsSUFBSSxDQUFDLENBQUQsQ0FBSjtNQUNBRyxZQUFZLENBQUMsS0FBRCxDQUFaO0lBQ0E7RUFDRCxDQWxCUSxFQWtCTixDQUFDSixDQUFELENBbEJNLENBQVQ7RUFvQkEsb0JBQ0Msb0JBQUMsR0FBRDtJQUFLLGFBQWEsRUFBQyxRQUFuQjtJQUE0QixVQUFVLEVBQUM7RUFBdkMsZ0JBQ0Msb0JBQUMsR0FBRDtJQUFLLGFBQWEsRUFBQztFQUFuQixHQUNFSixNQUFNLENBQUMwQixHQUFQLENBQVcsQ0FBQ2QsS0FBRCxFQUFRQyxLQUFSLGtCQUNYLG9CQUFDLEdBQUQ7SUFDQyxNQUFNLEVBQUMsR0FEUjtJQUVDLEdBQUcsRUFBRUEsS0FGTjtJQUdDLE1BQU0sRUFBRUQsS0FBSyxDQUFDRSxNQUhmO0lBSUMsV0FBVyxFQUFDLE1BSmI7SUFLQyxLQUFLLEVBQUMsR0FMUDtJQU1DLFVBQVUsRUFBQyxRQU5aO0lBT0MsV0FBVyxFQUNWLENBQUNaLENBQUMsSUFBSVcsS0FBTCxJQUFjVCxDQUFDLElBQUlTLEtBQXBCLEtBQThCTixTQUFTLElBQUksSUFBM0MsR0FDRyxPQURILEdBRUc7RUFWTCxFQURBLENBREYsQ0FERCxDQUREO0FBc0JBLENBNUVEOztBQThFQW9CLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNCLElBQWpCIn0=
"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);

  const generateRandomBlocks = () => {
    for (let i = 1; i < 10; i++) {
      let block = {
        height: i * Math.random() * 10,
        width: i * Math.random() * 10
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setCounter(prev => prev + 1);
    }, 100);
    return () => clearInterval(timer);
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: block.width,
    borderColor: "white"
  }, /*#__PURE__*/React.createElement(Text, null, index))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJnZW5lcmF0ZVJhbmRvbUJsb2NrcyIsImkiLCJibG9jayIsImhlaWdodCIsIk1hdGgiLCJyYW5kb20iLCJ3aWR0aCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwicHJldiIsImNsZWFySW50ZXJ2YWwiLCJtYXAiLCJpbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gdXNlU3RhdGUoMCk7XG5cblx0Y29uc3QgZ2VuZXJhdGVSYW5kb21CbG9ja3MgPSAoKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHRsZXQgYmxvY2sgPSB7XG5cdFx0XHRcdGhlaWdodDogaSAqIE1hdGgucmFuZG9tKCkgKiAxMCxcblx0XHRcdFx0d2lkdGg6IGkgKiBNYXRoLnJhbmRvbSgpICogMTAsXG5cdFx0XHR9O1xuXHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdH1cblx0fTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGdlbmVyYXRlUmFuZG9tQmxvY2tzKCk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRDb3VudGVyKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fSwgMTAwKTtcblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiPlxuXHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHQ8Qm94XG5cdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRib3JkZXJTdHlsZT1cInJvdW5kXCJcblx0XHRcdFx0XHRoZWlnaHQ9e2Jsb2NrLmhlaWdodH1cblx0XHRcdFx0XHR3aWR0aD17YmxvY2sud2lkdGh9XG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I9XCJ3aGl0ZVwiXG5cdFx0XHRcdD5cblx0XHRcdFx0XHQ8VGV4dD57aW5kZXh9PC9UZXh0PlxuXHRcdFx0XHQ8L0JveD5cblx0XHRcdCkpfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07RUFBRUMsUUFBRjtFQUFZQztBQUFaLElBQTBCRixPQUFPLENBQUMsT0FBRCxDQUF2Qzs7QUFDQSxNQUFNO0VBQUVHLFFBQUY7RUFBWUMsTUFBWjtFQUFvQkMsUUFBcEI7RUFBOEJDLElBQTlCO0VBQW9DQztBQUFwQyxJQUE0Q1AsT0FBTyxDQUFDLEtBQUQsQ0FBekQ7O0FBRUEsTUFBTVEsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQyxDQUFkO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBRUEsTUFBTUMsSUFBSSxHQUFHLE1BQU07RUFDbEIsTUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JaLFFBQVEsQ0FBQyxFQUFELENBQWxDO0VBQ0EsTUFBTSxDQUFDYSxPQUFELEVBQVVDLFVBQVYsSUFBd0JkLFFBQVEsQ0FBQyxDQUFELENBQXRDOztFQUVBLE1BQU1lLG9CQUFvQixHQUFHLE1BQU07SUFDbEMsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO01BQzVCLElBQUlDLEtBQUssR0FBRztRQUNYQyxNQUFNLEVBQUVGLENBQUMsR0FBR0csSUFBSSxDQUFDQyxNQUFMLEVBQUosR0FBb0IsRUFEakI7UUFFWEMsS0FBSyxFQUFFTCxDQUFDLEdBQUdHLElBQUksQ0FBQ0MsTUFBTCxFQUFKLEdBQW9CO01BRmhCLENBQVo7TUFJQVgsTUFBTSxDQUFDYSxJQUFQLENBQVlMLEtBQVo7SUFDQTtFQUNELENBUkQ7O0VBVUFoQixTQUFTLENBQUMsTUFBTTtJQUNmYyxvQkFBb0I7SUFDcEIsTUFBTVEsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtNQUMvQlYsVUFBVSxDQUFFVyxJQUFELElBQVVBLElBQUksR0FBRyxDQUFsQixDQUFWO0lBQ0EsQ0FGd0IsRUFFdEIsR0FGc0IsQ0FBekI7SUFHQSxPQUFPLE1BQU1DLGFBQWEsQ0FBQ0gsS0FBRCxDQUExQjtFQUNBLENBTlEsRUFNTixFQU5NLENBQVQ7RUFRQSxvQkFDQyxvQkFBQyxHQUFEO0lBQUssYUFBYSxFQUFDO0VBQW5CLEdBQ0VkLE1BQU0sQ0FBQ2tCLEdBQVAsQ0FBVyxDQUFDVixLQUFELEVBQVFXLEtBQVIsa0JBQ1gsb0JBQUMsR0FBRDtJQUNDLEdBQUcsRUFBRUEsS0FETjtJQUVDLFdBQVcsRUFBQyxPQUZiO0lBR0MsTUFBTSxFQUFFWCxLQUFLLENBQUNDLE1BSGY7SUFJQyxLQUFLLEVBQUVELEtBQUssQ0FBQ0ksS0FKZDtJQUtDLFdBQVcsRUFBQztFQUxiLGdCQU9DLG9CQUFDLElBQUQsUUFBT08sS0FBUCxDQVBELENBREEsQ0FERixDQUREO0FBZUEsQ0FyQ0Q7O0FBdUNBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJwQixJQUFqQiJ9
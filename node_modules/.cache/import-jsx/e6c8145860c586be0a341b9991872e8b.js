"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const no_blocks = 40;
const speed = 50;
const blocks = [];

const BurbleSort = () => {
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const {
    exit
  } = useApp();
  const [isRunning, setIsRunning] = useState(false);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < no_blocks; i++) {
      let block = {
        height: Math.round(Math.random() * 20) + 10,
        content: ""
      };
      let s = "";
      let temp = block.height;

      while (temp--) {
        s += "*";
      }

      block.content = s;
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    setIsRunning(true);
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, speed);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (blocks[j].height > blocks[i].height) {
      let temp = blocks[i];
      blocks[i] = blocks[j];
      blocks[j] = temp;
    }

    if (j == blocks.length - 1) {
      if (j == i + 1) setJ(i);else setJ(i + 1);
      setI(prev => prev + 1);
    }

    if (i == blocks.length - 1) {
      setI(0);
      setJ(0);
      setIsRunning(false);
    }
  }, [j]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    height: block.height,
    width: "1",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, {
    bold: true,
    color: (i == index || j == index) && isRunning == true ? "green" : "white"
  }, block.content)))));
};

module.exports = BurbleSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJub19ibG9ja3MiLCJzcGVlZCIsImJsb2NrcyIsIkJ1cmJsZVNvcnQiLCJpIiwic2V0SSIsImoiLCJzZXRKIiwiZXhpdCIsImlzUnVubmluZyIsInNldElzUnVubmluZyIsImlucHV0Iiwia2V5IiwiZ2VuZXJhdGVSYW5kb21CbG9ja3MiLCJibG9jayIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImNvbnRlbnQiLCJzIiwidGVtcCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwicHJldiIsImNsZWFySW50ZXJ2YWwiLCJsZW5ndGgiLCJtYXAiLCJpbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJCdXJibGVTb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKFwiaW5rLWJpZy10ZXh0XCIpO1xuXG5jb25zdCBpdGVtcyA9IFt7IGxhYmVsOiBcImFcIiB9LCB7IGxhYmVsOiBcImJcIiB9LCB7IGxhYmVsOiBcImNcIiB9XTtcbmNvbnN0IG5vX2Jsb2NrcyA9IDQwO1xuY29uc3Qgc3BlZWQgPSA1MDtcbmNvbnN0IGJsb2NrcyA9IFtdO1xuXG5jb25zdCBCdXJibGVTb3J0ID0gKCkgPT4ge1xuXHRjb25zdCBbaSwgc2V0SV0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2osIHNldEpdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IHsgZXhpdCB9ID0gdXNlQXBwKCk7XG5cblx0Y29uc3QgW2lzUnVubmluZywgc2V0SXNSdW5uaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbm9fYmxvY2tzOyBpKyspIHtcblx0XHRcdGxldCBibG9jayA9IHtcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAyMCkgKyAxMCxcblx0XHRcdFx0Y29udGVudDogXCJcIixcblx0XHRcdH07XG5cblx0XHRcdGxldCBzID0gXCJcIjtcblx0XHRcdGxldCB0ZW1wID0gYmxvY2suaGVpZ2h0O1xuXHRcdFx0d2hpbGUgKHRlbXAtLSkge1xuXHRcdFx0XHRzICs9IFwiKlwiO1xuXHRcdFx0fVxuXG5cdFx0XHRibG9jay5jb250ZW50ID0gcztcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdHNldElzUnVubmluZyh0cnVlKTtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHNldEooKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHR9LCBzcGVlZCk7XG5cblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmIChibG9ja3Nbal0uaGVpZ2h0ID4gYmxvY2tzW2ldLmhlaWdodCkge1xuXHRcdFx0bGV0IHRlbXAgPSBibG9ja3NbaV07XG5cdFx0XHRibG9ja3NbaV0gPSBibG9ja3Nbal07XG5cdFx0XHRibG9ja3Nbal0gPSB0ZW1wO1xuXHRcdH1cblxuXHRcdGlmIChqID09IGJsb2Nrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRpZiAoaiA9PSBpICsgMSkgc2V0SihpKTtcblx0XHRcdGVsc2Ugc2V0SihpICsgMSk7XG5cdFx0XHRzZXRJKChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fVxuXG5cdFx0aWYgKGkgPT0gYmxvY2tzLmxlbmd0aCAtIDEpIHtcblx0XHRcdHNldEkoMCk7XG5cdFx0XHRzZXRKKDApO1xuXHRcdFx0c2V0SXNSdW5uaW5nKGZhbHNlKTtcblx0XHR9XG5cdH0sIFtqXSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIj5cblx0XHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHRcdDxCb3hcblx0XHRcdFx0XHRcdG1hcmdpbj1cIjFcIlxuXHRcdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRcdGhlaWdodD17YmxvY2suaGVpZ2h0fVxuXHRcdFx0XHRcdFx0d2lkdGg9XCIxXCJcblx0XHRcdFx0XHRcdGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdDxUZXh0XG5cdFx0XHRcdFx0XHRcdGJvbGRcblx0XHRcdFx0XHRcdFx0Y29sb3I9e1xuXHRcdFx0XHRcdFx0XHRcdChpID09IGluZGV4IHx8IGogPT0gaW5kZXgpICYmIGlzUnVubmluZyA9PSB0cnVlXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IFwiZ3JlZW5cIlxuXHRcdFx0XHRcdFx0XHRcdFx0OiBcIndoaXRlXCJcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHR7YmxvY2suY29udGVudH1cblx0XHRcdFx0XHRcdDwvVGV4dD5cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0KSl9XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnVyYmxlU29ydDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUNBLE1BQU1RLE9BQU8sR0FBR1IsT0FBTyxDQUFDLGNBQUQsQ0FBdkI7O0FBRUEsTUFBTVMsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQixFQUFpQztFQUFFQSxLQUFLLEVBQUU7QUFBVCxDQUFqQyxDQUFkO0FBQ0EsTUFBTUMsU0FBUyxHQUFHLEVBQWxCO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLEVBQWQ7QUFDQSxNQUFNQyxNQUFNLEdBQUcsRUFBZjs7QUFFQSxNQUFNQyxVQUFVLEdBQUcsTUFBTTtFQUN4QixNQUFNLENBQUNDLENBQUQsRUFBSUMsSUFBSixJQUFZZixRQUFRLENBQUMsQ0FBRCxDQUExQjtFQUNBLE1BQU0sQ0FBQ2dCLENBQUQsRUFBSUMsSUFBSixJQUFZakIsUUFBUSxDQUFDLENBQUQsQ0FBMUI7RUFDQSxNQUFNO0lBQUVrQjtFQUFGLElBQVdmLE1BQU0sRUFBdkI7RUFFQSxNQUFNLENBQUNnQixTQUFELEVBQVlDLFlBQVosSUFBNEJwQixRQUFRLENBQUMsS0FBRCxDQUExQztFQUVBRSxRQUFRLENBQUMsQ0FBQ21CLEtBQUQsRUFBUUMsR0FBUixLQUFnQjtJQUN4QixJQUFJRCxLQUFLLEtBQUssR0FBZCxFQUFtQjtNQUNsQkgs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
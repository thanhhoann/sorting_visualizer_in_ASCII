"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [blockIndex, setBlockIndex] = useState(0);
  const [test, setTest] = useState(0);
  const [current, setCurrent] = useState(0);
  const [prev, setPrev] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 20; i++) {
      let block = {
        index: i,
        height: Math.random() * 10,
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setBlockIndex(prev => prev + 1);
    }, 500);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    setCurrent(blocks[blockIndex].height);
    setPrev(blocks[blockIndex - 1].height);
  }, [blockIndex]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React.createElement(Text, null, blockIndex), /*#__PURE__*/React.createElement(Text, null, current, " ", prev), blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: blockIndex == index || blockIndex - 1 == index ? "green" : "white"
  })));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJibG9ja0luZGV4Iiwic2V0QmxvY2tJbmRleCIsInRlc3QiLCJzZXRUZXN0IiwiY3VycmVudCIsInNldEN1cnJlbnQiLCJwcmV2Iiwic2V0UHJldiIsImlucHV0Iiwia2V5IiwiZXhpdCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiaSIsImJsb2NrIiwiaW5kZXgiLCJoZWlnaHQiLCJNYXRoIiwicmFuZG9tIiwiaXNTZWxlY3RlZCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtibG9ja0luZGV4LCBzZXRCbG9ja0luZGV4XSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbdGVzdCwgc2V0VGVzdF0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2N1cnJlbnQsIHNldEN1cnJlbnRdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtwcmV2LCBzZXRQcmV2XSA9IHVzZVN0YXRlKDApO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0aWYgKGlucHV0ID09PSBcInFcIikge1xuXHRcdFx0ZXhpdCgpO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgZ2VuZXJhdGVSYW5kb21CbG9ja3MgPSAoKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XG5cdFx0XHRsZXQgYmxvY2sgPSB7XG5cdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRoZWlnaHQ6IE1hdGgucmFuZG9tKCkgKiAxMCxcblx0XHRcdFx0aXNTZWxlY3RlZDogZmFsc2UsXG5cdFx0XHR9O1xuXHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdH1cblx0fTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGdlbmVyYXRlUmFuZG9tQmxvY2tzKCk7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRzZXRCbG9ja0luZGV4KChwcmV2KSA9PiBwcmV2ICsgMSk7XG5cdFx0fSwgNTAwKTtcblxuXHRcdHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHRpbWVyKTtcblx0fSwgW10pO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0c2V0Q3VycmVudChibG9ja3NbYmxvY2tJbmRleF0uaGVpZ2h0KTtcblx0XHRzZXRQcmV2KGJsb2Nrc1tibG9ja0luZGV4IC0gMV0uaGVpZ2h0KTtcblx0fSwgW2Jsb2NrSW5kZXhdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiPlxuXHRcdFx0PFRleHQ+e2Jsb2NrSW5kZXh9PC9UZXh0PlxuXHRcdFx0PFRleHQ+XG5cdFx0XHRcdHtjdXJyZW50fSB7cHJldn1cblx0XHRcdDwvVGV4dD5cblx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0PEJveFxuXHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0Ym9yZGVyU3R5bGU9XCJyb3VuZFwiXG5cdFx0XHRcdFx0aGVpZ2h0PXtibG9jay5oZWlnaHR9XG5cdFx0XHRcdFx0d2lkdGg9XCI1XCJcblx0XHRcdFx0XHRhbGlnbkl0ZW1zPVwiY2VudGVyXCJcblx0XHRcdFx0XHRib3JkZXJDb2xvcj17XG5cdFx0XHRcdFx0XHRibG9ja0luZGV4ID09IGluZGV4IHx8IGJsb2NrSW5kZXggLSAxID09IGluZGV4ID8gXCJncmVlblwiIDogXCJ3aGl0ZVwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQ+PC9Cb3g+XG5cdFx0XHQpKX1cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUVBLE1BQU1RLEtBQUssR0FBRyxDQUFDO0VBQUVDLEtBQUssRUFBRTtBQUFULENBQUQsRUFBaUI7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakIsRUFBaUM7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakMsQ0FBZDtBQUNBLE1BQU1DLE1BQU0sR0FBRyxFQUFmOztBQUVBLE1BQU1DLElBQUksR0FBRyxNQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWixRQUFRLENBQUMsRUFBRCxDQUFsQztFQUNBLE1BQU0s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
"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const BigText = require("ink-big-text");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);
  const [i, setI] = useState(0);
  const [j, setJ] = useState(0);
  const [test, setTest] = useState(0);
  const [current, setCurrent] = useState(0);
  const [prev, setPrev] = useState(0);
  useInput((input, key) => {
    if (input === "q") {
      exit();
    }
  });

  const generateRandomBlocks = () => {
    for (let i = 0; i < 15; i++) {
      let block = {
        index: i,
        height: Math.round(Math.random() * 10),
        isSelected: false
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setJ(prev => prev + 1);
    }, 200);
    return () => clearInterval(timer);
  }, []);
  useEffect(() => {
    if (j == blocks.length) {
      setJ(i + 1);
      setI(prev => prev + 1);
    }
  }, [j]);
  let text = `${i} ${j}`;
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, text), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    margin: "1",
    key: index,
    borderStyle: "round",
    height: block.height,
    width: "5",
    alignItems: "center",
    borderColor: i == index || j == index ? "green" : "white"
  }))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiQmlnVGV4dCIsIml0ZW1zIiwibGFiZWwiLCJibG9ja3MiLCJUZXN0IiwiY29sb3IiLCJzZXRDb2xvciIsImNvdW50ZXIiLCJzZXRDb3VudGVyIiwiaSIsInNldEkiLCJqIiwic2V0SiIsInRlc3QiLCJzZXRUZXN0IiwiY3VycmVudCIsInNldEN1cnJlbnQiLCJwcmV2Iiwic2V0UHJldiIsImlucHV0Iiwia2V5IiwiZXhpdCIsImdlbmVyYXRlUmFuZG9tQmxvY2tzIiwiYmxvY2siLCJpbmRleCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImlzU2VsZWN0ZWQiLCJwdXNoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJsZW5ndGgiLCJ0ZXh0IiwibWFwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VJbnB1dCwgdXNlQXBwLCB1c2VGb2N1cywgVGV4dCwgQm94IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgQmlnVGV4dCA9IHJlcXVpcmUoXCJpbmstYmlnLXRleHRcIik7XG5cbmNvbnN0IGl0ZW1zID0gW3sgbGFiZWw6IFwiYVwiIH0sIHsgbGFiZWw6IFwiYlwiIH0sIHsgbGFiZWw6IFwiY1wiIH1dO1xuY29uc3QgYmxvY2tzID0gW107XG5cbmNvbnN0IFRlc3QgPSAoKSA9PiB7XG5cdGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtjb3VudGVyLCBzZXRDb3VudGVyXSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbaSwgc2V0SV0gPSB1c2VTdGF0ZSgwKTtcblx0Y29uc3QgW2osIHNldEpdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFt0ZXN0LCBzZXRUZXN0XSA9IHVzZVN0YXRlKDApO1xuXG5cdGNvbnN0IFtjdXJyZW50LCBzZXRDdXJyZW50XSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbcHJldiwgc2V0UHJldl0gPSB1c2VTdGF0ZSgwKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcblx0XHRcdGV4aXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGdlbmVyYXRlUmFuZG9tQmxvY2tzID0gKCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTU7IGkrKykge1xuXHRcdFx0bGV0IGJsb2NrID0ge1xuXHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0aGVpZ2h0OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMCksXG5cdFx0XHRcdGlzU2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0fTtcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0c2V0SigocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH0sIDIwMCk7XG5cblx0XHRyZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH0sIFtdKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmIChqID09IGJsb2Nrcy5sZW5ndGgpIHtcblx0XHRcdHNldEooaSArIDEpO1xuXHRcdFx0c2V0SSgocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH1cblx0fSwgW2pdKTtcblxuXHRsZXQgdGV4dCA9IGAke2l9ICR7an1gO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuXHRcdFx0PFRleHQ+e3RleHR9PC9UZXh0PlxuXG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIj5cblx0XHRcdFx0e2Jsb2Nrcy5tYXAoKGJsb2NrLCBpbmRleCkgPT4gKFxuXHRcdFx0XHRcdDxCb3hcblx0XHRcdFx0XHRcdG1hcmdpbj1cIjFcIlxuXHRcdFx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0XHRcdGJvcmRlclN0eWxlPVwicm91bmRcIlxuXHRcdFx0XHRcdFx0aGVpZ2h0PXtibG9jay5oZWlnaHR9XG5cdFx0XHRcdFx0XHR3aWR0aD1cIjVcIlxuXHRcdFx0XHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXG5cdFx0XHRcdFx0XHRib3JkZXJDb2xvcj17aSA9PSBpbmRleCB8fCBqID09IGluZGV4ID8gXCJncmVlblwiIDogXCJ3aGl0ZVwifVxuXHRcdFx0XHRcdD48L0JveD5cblx0XHRcdFx0KSl9XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUNBLE1BQU1RLE9BQU8sR0FBR1IsT0FBTyxDQUFDLGNBQUQsQ0FBdkI7O0FBRUEsTUFBTVMsS0FBSyxHQUFHLENBQUM7RUFBRUMsS0FBSyxFQUFFO0FBQVQsQ0FBRCxFQUFpQjtFQUFFQSxLQUFLLEVBQUU7QUFBVCxD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
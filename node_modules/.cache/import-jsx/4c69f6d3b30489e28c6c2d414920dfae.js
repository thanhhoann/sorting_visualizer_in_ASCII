"use strict";

const React = require("react");

const {
  useState,
  useEffect
} = require("react");

const {
  useInput,
  useApp,
  useFocus,
  Text,
  Box
} = require("ink");

const items = [{
  label: "a"
}, {
  label: "b"
}, {
  label: "c"
}];
const blocks = [];

const Test = () => {
  const [color, setColor] = useState("");
  const [counter, setCounter] = useState(0);

  const generateRandomBlocks = () => {
    for (let i = 1; i < 10; i++) {
      let block = {
        height: i * Math.random() * 1000,
        width: i * Math.random() * 1000
      };
      blocks.push(block);
    }
  };

  useEffect(() => {
    generateRandomBlocks();
    const timer = setInterval(() => {
      setCounter(prev => prev + 1);
    }, 100);
    return () => clearInterval(timer);
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    key: index,
    borderStyle: "round",
    height: block.height,
    width: block.width,
    borderColor: "white"
  }, /*#__PURE__*/React.createElement(Text, null, index))));
};

module.exports = Test;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUlucHV0IiwidXNlQXBwIiwidXNlRm9jdXMiLCJUZXh0IiwiQm94IiwiaXRlbXMiLCJsYWJlbCIsImJsb2NrcyIsIlRlc3QiLCJjb2xvciIsInNldENvbG9yIiwiY291bnRlciIsInNldENvdW50ZXIiLCJnZW5lcmF0ZVJhbmRvbUJsb2NrcyIsImkiLCJibG9jayIsImhlaWdodCIsIk1hdGgiLCJyYW5kb20iLCJ3aWR0aCIsInB1c2giLCJ0aW1lciIsInNldEludGVydmFsIiwicHJldiIsImNsZWFySW50ZXJ2YWwiLCJtYXAiLCJpbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJUZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlSW5wdXQsIHVzZUFwcCwgdXNlRm9jdXMsIFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcblxuY29uc3QgaXRlbXMgPSBbeyBsYWJlbDogXCJhXCIgfSwgeyBsYWJlbDogXCJiXCIgfSwgeyBsYWJlbDogXCJjXCIgfV07XG5jb25zdCBibG9ja3MgPSBbXTtcblxuY29uc3QgVGVzdCA9ICgpID0+IHtcblx0Y29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gdXNlU3RhdGUoMCk7XG5cblx0Y29uc3QgZ2VuZXJhdGVSYW5kb21CbG9ja3MgPSAoKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHRsZXQgYmxvY2sgPSB7XG5cdFx0XHRcdGhlaWdodDogaSAqIE1hdGgucmFuZG9tKCkgKiAxMDAwLFxuXHRcdFx0XHR3aWR0aDogaSAqIE1hdGgucmFuZG9tKCkgKiAxMDAwLFxuXHRcdFx0fTtcblx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHR9XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRnZW5lcmF0ZVJhbmRvbUJsb2NrcygpO1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0c2V0Q291bnRlcigocHJldikgPT4gcHJldiArIDEpO1xuXHRcdH0sIDEwMCk7XG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHR9LCBbXSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIj5cblx0XHRcdHtibG9ja3MubWFwKChibG9jaywgaW5kZXgpID0+IChcblx0XHRcdFx0PEJveFxuXHRcdFx0XHRcdGtleT17aW5kZXh9XG5cdFx0XHRcdFx0Ym9yZGVyU3R5bGU9XCJyb3VuZFwiXG5cdFx0XHRcdFx0aGVpZ2h0PXtibG9jay5oZWlnaHR9XG5cdFx0XHRcdFx0d2lkdGg9e2Jsb2NrLndpZHRofVxuXHRcdFx0XHRcdGJvcmRlckNvbG9yPVwid2hpdGVcIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0PFRleHQ+e2luZGV4fTwvVGV4dD5cblx0XHRcdFx0PC9Cb3g+XG5cdFx0XHQpKX1cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUVDLFFBQUY7RUFBWUM7QUFBWixJQUEwQkYsT0FBTyxDQUFDLE9BQUQsQ0FBdkM7O0FBQ0EsTUFBTTtFQUFFRyxRQUFGO0VBQVlDLE1BQVo7RUFBb0JDLFFBQXBCO0VBQThCQyxJQUE5QjtFQUFvQ0M7QUFBcEMsSUFBNENQLE9BQU8sQ0FBQyxLQUFELENBQXpEOztBQUVBLE1BQU1RLEtBQUssR0FBRyxDQUFDO0VBQUVDLEtBQUssRUFBRTtBQUFULENBQUQsRUFBaUI7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakIsRUFBaUM7RUFBRUEsS0FBSyxFQUFFO0FBQVQsQ0FBakMsQ0FBZDtBQUNBLE1BQU1DLE1BQU0sR0FBRyxFQUFmOztBQUVBLE1BQU1DLElBQUksR0FBRyxNQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWixRQUFRLENBQUMsRUFBRCxDQUFsQztFQUNBLE1BQU0sQ0FBQ2EsT0FBRCxFQUFVQyxVQUFWLElBQXdCZCxRQUFRLENBQUMsQ0FBRCxDQUF0Qzs7RUFFQSxNQUFNZSxvQkFBb0IsR0FBRyxNQUFNO0lBQ2xDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtNQUM1QixJQUFJQyxLQUFLLEdBQUc7UUFDWEMsTUFBTSxFQUFFRixDQUFDLEdBQUdHLElBQUksQ0FBQ0MsTUFBTCxFQUFKLEdBQW9CLElBRGpCO1FBRVhDLEtBQUssRUFBRUwsQ0FBQyxHQUFHRyxJQUFJLENBQUNDLE1BQUwsRUFBSixHQUFvQjtNQUZoQixDQUFaO01BSUFYLE1BQU0sQ0FBQ2EsSUFBUCxDQUFZTCxLQUFaO0lBQ0E7RUFDRCxDQVJEOztFQVVBaEIsU0FBUyxDQUFDLE1BQU07SUFDZmMsb0JBQW9CO0lBQ3BCLE1BQU1RLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07TUFDL0JWLFVBQVUsQ0FBRVcsSUFBRCxJQUFVQSxJQUFJLEdBQUcsQ0FBbEIsQ0FBVjtJQUNBLENBRndCLEVBRXRCLEdBRnNCLENBQXpCO0lBR0EsT0FBTyxNQUFNQyxhQUFhLENBQUNILEtBQUQsQ0FBMUI7RUFDQSxDQU5RLEVBTU4sRUFOTSxDQUFUO0VBUUEsb0JBQ0Msb0JBQUMsR0FBRDtJQUFLLGFBQWEsRUFBQztFQUFuQixHQUNFZCxNQUFNLENBQUNrQixHQUFQLENBQVcsQ0FBQ1YsS0FBRCxFQUFRVyxLQUFSLGtCQUNYLG9CQUFDLEdBQUQ7SUFDQyxHQUFHLEVBQUVBLEtBRE47SUFFQyxXQUFXLEVBQUMsT0FGYjtJQUdDLE1BQU0sRUFBRVgsS0FBSyxDQUFDQyxNQUhmO0lBSUMsS0FBSyxFQUFFRCxLQUFLLENBQUNJLEtBSmQ7SUFLQyxXQUFXLEVBQUM7RUFMYixnQkFPQyxvQkFBQyxJQUFELFFBQU9PLEtBQVAsQ0FQRCxDQURBLENBREYsQ0FERDtBQWVBLENBckNEOztBQXVDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsSUFBakIifQ==